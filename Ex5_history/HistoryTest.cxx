// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HistoryTest.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "HistoryTest.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




SensorData::SensorData()
{
}

SensorData::~SensorData()
{
}

SensorData::SensorData(
        const SensorData& x)
{
    m_timestamp = x.m_timestamp;
    m_sequence_number = x.m_sequence_number;
    m_temperature = x.m_temperature;
    m_humidity = x.m_humidity;
    m_pressure = x.m_pressure;
    m_message = x.m_message;
}

SensorData::SensorData(
        SensorData&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_sequence_number = x.m_sequence_number;
    m_temperature = x.m_temperature;
    m_humidity = x.m_humidity;
    m_pressure = x.m_pressure;
    m_message = std::move(x.m_message);
}

SensorData& SensorData::operator =(
        const SensorData& x)
{

    m_timestamp = x.m_timestamp;
    m_sequence_number = x.m_sequence_number;
    m_temperature = x.m_temperature;
    m_humidity = x.m_humidity;
    m_pressure = x.m_pressure;
    m_message = x.m_message;
    return *this;
}

SensorData& SensorData::operator =(
        SensorData&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_sequence_number = x.m_sequence_number;
    m_temperature = x.m_temperature;
    m_humidity = x.m_humidity;
    m_pressure = x.m_pressure;
    m_message = std::move(x.m_message);
    return *this;
}

bool SensorData::operator ==(
        const SensorData& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_sequence_number == x.m_sequence_number &&
           m_temperature == x.m_temperature &&
           m_humidity == x.m_humidity &&
           m_pressure == x.m_pressure &&
           m_message == x.m_message);
}

bool SensorData::operator !=(
        const SensorData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void SensorData::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t SensorData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& SensorData::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member sequence_number
 * @param _sequence_number New value for member sequence_number
 */
void SensorData::sequence_number(
        uint32_t _sequence_number)
{
    m_sequence_number = _sequence_number;
}

/*!
 * @brief This function returns the value of member sequence_number
 * @return Value of member sequence_number
 */
uint32_t SensorData::sequence_number() const
{
    return m_sequence_number;
}

/*!
 * @brief This function returns a reference to member sequence_number
 * @return Reference to member sequence_number
 */
uint32_t& SensorData::sequence_number()
{
    return m_sequence_number;
}


/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void SensorData::temperature(
        float _temperature)
{
    m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
float SensorData::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
float& SensorData::temperature()
{
    return m_temperature;
}


/*!
 * @brief This function sets a value in member humidity
 * @param _humidity New value for member humidity
 */
void SensorData::humidity(
        float _humidity)
{
    m_humidity = _humidity;
}

/*!
 * @brief This function returns the value of member humidity
 * @return Value of member humidity
 */
float SensorData::humidity() const
{
    return m_humidity;
}

/*!
 * @brief This function returns a reference to member humidity
 * @return Reference to member humidity
 */
float& SensorData::humidity()
{
    return m_humidity;
}


/*!
 * @brief This function sets a value in member pressure
 * @param _pressure New value for member pressure
 */
void SensorData::pressure(
        float _pressure)
{
    m_pressure = _pressure;
}

/*!
 * @brief This function returns the value of member pressure
 * @return Value of member pressure
 */
float SensorData::pressure() const
{
    return m_pressure;
}

/*!
 * @brief This function returns a reference to member pressure
 * @return Reference to member pressure
 */
float& SensorData::pressure()
{
    return m_pressure;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void SensorData::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void SensorData::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& SensorData::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& SensorData::message()
{
    return m_message;
}


// Include auxiliary functions like for serializing/deserializing.
#include "HistoryTestCdrAux.ipp"

