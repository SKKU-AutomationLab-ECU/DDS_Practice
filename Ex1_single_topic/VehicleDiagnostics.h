// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleDiagnostics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VEHICLEDIAGNOSTICS_H_
#define _FAST_DDS_GENERATED_VEHICLEDIAGNOSTICS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VEHICLEDIAGNOSTICS_SOURCE)
#define VEHICLEDIAGNOSTICS_DllAPI __declspec( dllexport )
#else
#define VEHICLEDIAGNOSTICS_DllAPI __declspec( dllimport )
#endif // VEHICLEDIAGNOSTICS_SOURCE
#else
#define VEHICLEDIAGNOSTICS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VEHICLEDIAGNOSTICS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure ErrorCode defined by the user in the IDL file.
 * @ingroup VehicleDiagnostics
 */
class ErrorCode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ErrorCode();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ErrorCode();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            const ErrorCode& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            ErrorCode&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            const ErrorCode& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            ErrorCode&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ErrorCode& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ErrorCode& x) const;

    /*!
     * @brief This function copies the value in member code
     * @param _code New value to be copied in member code
     */
    eProsima_user_DllExport void code(
            const std::string& _code);

    /*!
     * @brief This function moves the value in member code
     * @param _code New value to be moved in member code
     */
    eProsima_user_DllExport void code(
            std::string&& _code);

    /*!
     * @brief This function returns a constant reference to member code
     * @return Constant reference to member code
     */
    eProsima_user_DllExport const std::string& code() const;

    /*!
     * @brief This function returns a reference to member code
     * @return Reference to member code
     */
    eProsima_user_DllExport std::string& code();


    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    eProsima_user_DllExport void description(
            const std::string& _description);

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    eProsima_user_DllExport void description(
            std::string&& _description);

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    eProsima_user_DllExport const std::string& description() const;

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    eProsima_user_DllExport std::string& description();


    /*!
     * @brief This function sets a value in member is_critical
     * @param _is_critical New value for member is_critical
     */
    eProsima_user_DllExport void is_critical(
            bool _is_critical);

    /*!
     * @brief This function returns the value of member is_critical
     * @return Value of member is_critical
     */
    eProsima_user_DllExport bool is_critical() const;

    /*!
     * @brief This function returns a reference to member is_critical
     * @return Reference to member is_critical
     */
    eProsima_user_DllExport bool& is_critical();

private:

    std::string m_code;
    std::string m_description;
    bool m_is_critical{false};

};




/*!
 * @brief This class represents the structure VehicleDiagnostics defined by the user in the IDL file.
 * @ingroup VehicleDiagnostics
 */
class VehicleDiagnostics
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport VehicleDiagnostics();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~VehicleDiagnostics();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object VehicleDiagnostics that will be copied.
     */
    eProsima_user_DllExport VehicleDiagnostics(
            const VehicleDiagnostics& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object VehicleDiagnostics that will be copied.
     */
    eProsima_user_DllExport VehicleDiagnostics(
            VehicleDiagnostics&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object VehicleDiagnostics that will be copied.
     */
    eProsima_user_DllExport VehicleDiagnostics& operator =(
            const VehicleDiagnostics& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object VehicleDiagnostics that will be copied.
     */
    eProsima_user_DllExport VehicleDiagnostics& operator =(
            VehicleDiagnostics&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x VehicleDiagnostics object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const VehicleDiagnostics& x) const;

    /*!
     * @brief Comparison operator.
     * @param x VehicleDiagnostics object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const VehicleDiagnostics& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function copies the value in member vehicle_id
     * @param _vehicle_id New value to be copied in member vehicle_id
     */
    eProsima_user_DllExport void vehicle_id(
            const std::string& _vehicle_id);

    /*!
     * @brief This function moves the value in member vehicle_id
     * @param _vehicle_id New value to be moved in member vehicle_id
     */
    eProsima_user_DllExport void vehicle_id(
            std::string&& _vehicle_id);

    /*!
     * @brief This function returns a constant reference to member vehicle_id
     * @return Constant reference to member vehicle_id
     */
    eProsima_user_DllExport const std::string& vehicle_id() const;

    /*!
     * @brief This function returns a reference to member vehicle_id
     * @return Reference to member vehicle_id
     */
    eProsima_user_DllExport std::string& vehicle_id();


    /*!
     * @brief This function sets a value in member engine_rpm
     * @param _engine_rpm New value for member engine_rpm
     */
    eProsima_user_DllExport void engine_rpm(
            float _engine_rpm);

    /*!
     * @brief This function returns the value of member engine_rpm
     * @return Value of member engine_rpm
     */
    eProsima_user_DllExport float engine_rpm() const;

    /*!
     * @brief This function returns a reference to member engine_rpm
     * @return Reference to member engine_rpm
     */
    eProsima_user_DllExport float& engine_rpm();


    /*!
     * @brief This function sets a value in member vehicle_speed
     * @param _vehicle_speed New value for member vehicle_speed
     */
    eProsima_user_DllExport void vehicle_speed(
            float _vehicle_speed);

    /*!
     * @brief This function returns the value of member vehicle_speed
     * @return Value of member vehicle_speed
     */
    eProsima_user_DllExport float vehicle_speed() const;

    /*!
     * @brief This function returns a reference to member vehicle_speed
     * @return Reference to member vehicle_speed
     */
    eProsima_user_DllExport float& vehicle_speed();


    /*!
     * @brief This function sets a value in member engine_temperature
     * @param _engine_temperature New value for member engine_temperature
     */
    eProsima_user_DllExport void engine_temperature(
            float _engine_temperature);

    /*!
     * @brief This function returns the value of member engine_temperature
     * @return Value of member engine_temperature
     */
    eProsima_user_DllExport float engine_temperature() const;

    /*!
     * @brief This function returns a reference to member engine_temperature
     * @return Reference to member engine_temperature
     */
    eProsima_user_DllExport float& engine_temperature();


    /*!
     * @brief This function sets a value in member fuel_level
     * @param _fuel_level New value for member fuel_level
     */
    eProsima_user_DllExport void fuel_level(
            float _fuel_level);

    /*!
     * @brief This function returns the value of member fuel_level
     * @return Value of member fuel_level
     */
    eProsima_user_DllExport float fuel_level() const;

    /*!
     * @brief This function returns a reference to member fuel_level
     * @return Reference to member fuel_level
     */
    eProsima_user_DllExport float& fuel_level();


    /*!
     * @brief This function sets a value in member battery_voltage
     * @param _battery_voltage New value for member battery_voltage
     */
    eProsima_user_DllExport void battery_voltage(
            float _battery_voltage);

    /*!
     * @brief This function returns the value of member battery_voltage
     * @return Value of member battery_voltage
     */
    eProsima_user_DllExport float battery_voltage() const;

    /*!
     * @brief This function returns a reference to member battery_voltage
     * @return Reference to member battery_voltage
     */
    eProsima_user_DllExport float& battery_voltage();


    /*!
     * @brief This function copies the value in member error_codes
     * @param _error_codes New value to be copied in member error_codes
     */
    eProsima_user_DllExport void error_codes(
            const std::vector<ErrorCode>& _error_codes);

    /*!
     * @brief This function moves the value in member error_codes
     * @param _error_codes New value to be moved in member error_codes
     */
    eProsima_user_DllExport void error_codes(
            std::vector<ErrorCode>&& _error_codes);

    /*!
     * @brief This function returns a constant reference to member error_codes
     * @return Constant reference to member error_codes
     */
    eProsima_user_DllExport const std::vector<ErrorCode>& error_codes() const;

    /*!
     * @brief This function returns a reference to member error_codes
     * @return Reference to member error_codes
     */
    eProsima_user_DllExport std::vector<ErrorCode>& error_codes();

private:

    uint64_t m_timestamp{0};
    std::string m_vehicle_id;
    float m_engine_rpm{0.0};
    float m_vehicle_speed{0.0};
    float m_engine_temperature{0.0};
    float m_fuel_level{0.0};
    float m_battery_voltage{0.0};
    std::vector<ErrorCode> m_error_codes;

};

#endif // _FAST_DDS_GENERATED_VEHICLEDIAGNOSTICS_H_



