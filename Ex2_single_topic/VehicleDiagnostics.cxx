// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleDiagnostics.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "VehicleDiagnostics.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




ErrorCode::ErrorCode()
{
}

ErrorCode::~ErrorCode()
{
}

ErrorCode::ErrorCode(
        const ErrorCode& x)
{
    m_code = x.m_code;
    m_description = x.m_description;
    m_is_critical = x.m_is_critical;
}

ErrorCode::ErrorCode(
        ErrorCode&& x) noexcept
{
    m_code = std::move(x.m_code);
    m_description = std::move(x.m_description);
    m_is_critical = x.m_is_critical;
}

ErrorCode& ErrorCode::operator =(
        const ErrorCode& x)
{

    m_code = x.m_code;
    m_description = x.m_description;
    m_is_critical = x.m_is_critical;
    return *this;
}

ErrorCode& ErrorCode::operator =(
        ErrorCode&& x) noexcept
{

    m_code = std::move(x.m_code);
    m_description = std::move(x.m_description);
    m_is_critical = x.m_is_critical;
    return *this;
}

bool ErrorCode::operator ==(
        const ErrorCode& x) const
{
    return (m_code == x.m_code &&
           m_description == x.m_description &&
           m_is_critical == x.m_is_critical);
}

bool ErrorCode::operator !=(
        const ErrorCode& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member code
 * @param _code New value to be copied in member code
 */
void ErrorCode::code(
        const std::string& _code)
{
    m_code = _code;
}

/*!
 * @brief This function moves the value in member code
 * @param _code New value to be moved in member code
 */
void ErrorCode::code(
        std::string&& _code)
{
    m_code = std::move(_code);
}

/*!
 * @brief This function returns a constant reference to member code
 * @return Constant reference to member code
 */
const std::string& ErrorCode::code() const
{
    return m_code;
}

/*!
 * @brief This function returns a reference to member code
 * @return Reference to member code
 */
std::string& ErrorCode::code()
{
    return m_code;
}


/*!
 * @brief This function copies the value in member description
 * @param _description New value to be copied in member description
 */
void ErrorCode::description(
        const std::string& _description)
{
    m_description = _description;
}

/*!
 * @brief This function moves the value in member description
 * @param _description New value to be moved in member description
 */
void ErrorCode::description(
        std::string&& _description)
{
    m_description = std::move(_description);
}

/*!
 * @brief This function returns a constant reference to member description
 * @return Constant reference to member description
 */
const std::string& ErrorCode::description() const
{
    return m_description;
}

/*!
 * @brief This function returns a reference to member description
 * @return Reference to member description
 */
std::string& ErrorCode::description()
{
    return m_description;
}


/*!
 * @brief This function sets a value in member is_critical
 * @param _is_critical New value for member is_critical
 */
void ErrorCode::is_critical(
        bool _is_critical)
{
    m_is_critical = _is_critical;
}

/*!
 * @brief This function returns the value of member is_critical
 * @return Value of member is_critical
 */
bool ErrorCode::is_critical() const
{
    return m_is_critical;
}

/*!
 * @brief This function returns a reference to member is_critical
 * @return Reference to member is_critical
 */
bool& ErrorCode::is_critical()
{
    return m_is_critical;
}






VehicleDiagnostics::VehicleDiagnostics()
{
}

VehicleDiagnostics::~VehicleDiagnostics()
{
}

VehicleDiagnostics::VehicleDiagnostics(
        const VehicleDiagnostics& x)
{
    m_timestamp = x.m_timestamp;
    m_vehicle_id = x.m_vehicle_id;
    m_engine_rpm = x.m_engine_rpm;
    m_vehicle_speed = x.m_vehicle_speed;
    m_engine_temperature = x.m_engine_temperature;
    m_fuel_level = x.m_fuel_level;
    m_battery_voltage = x.m_battery_voltage;
    m_error_codes = x.m_error_codes;
}

VehicleDiagnostics::VehicleDiagnostics(
        VehicleDiagnostics&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_vehicle_id = std::move(x.m_vehicle_id);
    m_engine_rpm = x.m_engine_rpm;
    m_vehicle_speed = x.m_vehicle_speed;
    m_engine_temperature = x.m_engine_temperature;
    m_fuel_level = x.m_fuel_level;
    m_battery_voltage = x.m_battery_voltage;
    m_error_codes = std::move(x.m_error_codes);
}

VehicleDiagnostics& VehicleDiagnostics::operator =(
        const VehicleDiagnostics& x)
{

    m_timestamp = x.m_timestamp;
    m_vehicle_id = x.m_vehicle_id;
    m_engine_rpm = x.m_engine_rpm;
    m_vehicle_speed = x.m_vehicle_speed;
    m_engine_temperature = x.m_engine_temperature;
    m_fuel_level = x.m_fuel_level;
    m_battery_voltage = x.m_battery_voltage;
    m_error_codes = x.m_error_codes;
    return *this;
}

VehicleDiagnostics& VehicleDiagnostics::operator =(
        VehicleDiagnostics&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_vehicle_id = std::move(x.m_vehicle_id);
    m_engine_rpm = x.m_engine_rpm;
    m_vehicle_speed = x.m_vehicle_speed;
    m_engine_temperature = x.m_engine_temperature;
    m_fuel_level = x.m_fuel_level;
    m_battery_voltage = x.m_battery_voltage;
    m_error_codes = std::move(x.m_error_codes);
    return *this;
}

bool VehicleDiagnostics::operator ==(
        const VehicleDiagnostics& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_vehicle_id == x.m_vehicle_id &&
           m_engine_rpm == x.m_engine_rpm &&
           m_vehicle_speed == x.m_vehicle_speed &&
           m_engine_temperature == x.m_engine_temperature &&
           m_fuel_level == x.m_fuel_level &&
           m_battery_voltage == x.m_battery_voltage &&
           m_error_codes == x.m_error_codes);
}

bool VehicleDiagnostics::operator !=(
        const VehicleDiagnostics& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void VehicleDiagnostics::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t VehicleDiagnostics::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& VehicleDiagnostics::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member vehicle_id
 * @param _vehicle_id New value to be copied in member vehicle_id
 */
void VehicleDiagnostics::vehicle_id(
        const std::string& _vehicle_id)
{
    m_vehicle_id = _vehicle_id;
}

/*!
 * @brief This function moves the value in member vehicle_id
 * @param _vehicle_id New value to be moved in member vehicle_id
 */
void VehicleDiagnostics::vehicle_id(
        std::string&& _vehicle_id)
{
    m_vehicle_id = std::move(_vehicle_id);
}

/*!
 * @brief This function returns a constant reference to member vehicle_id
 * @return Constant reference to member vehicle_id
 */
const std::string& VehicleDiagnostics::vehicle_id() const
{
    return m_vehicle_id;
}

/*!
 * @brief This function returns a reference to member vehicle_id
 * @return Reference to member vehicle_id
 */
std::string& VehicleDiagnostics::vehicle_id()
{
    return m_vehicle_id;
}


/*!
 * @brief This function sets a value in member engine_rpm
 * @param _engine_rpm New value for member engine_rpm
 */
void VehicleDiagnostics::engine_rpm(
        float _engine_rpm)
{
    m_engine_rpm = _engine_rpm;
}

/*!
 * @brief This function returns the value of member engine_rpm
 * @return Value of member engine_rpm
 */
float VehicleDiagnostics::engine_rpm() const
{
    return m_engine_rpm;
}

/*!
 * @brief This function returns a reference to member engine_rpm
 * @return Reference to member engine_rpm
 */
float& VehicleDiagnostics::engine_rpm()
{
    return m_engine_rpm;
}


/*!
 * @brief This function sets a value in member vehicle_speed
 * @param _vehicle_speed New value for member vehicle_speed
 */
void VehicleDiagnostics::vehicle_speed(
        float _vehicle_speed)
{
    m_vehicle_speed = _vehicle_speed;
}

/*!
 * @brief This function returns the value of member vehicle_speed
 * @return Value of member vehicle_speed
 */
float VehicleDiagnostics::vehicle_speed() const
{
    return m_vehicle_speed;
}

/*!
 * @brief This function returns a reference to member vehicle_speed
 * @return Reference to member vehicle_speed
 */
float& VehicleDiagnostics::vehicle_speed()
{
    return m_vehicle_speed;
}


/*!
 * @brief This function sets a value in member engine_temperature
 * @param _engine_temperature New value for member engine_temperature
 */
void VehicleDiagnostics::engine_temperature(
        float _engine_temperature)
{
    m_engine_temperature = _engine_temperature;
}

/*!
 * @brief This function returns the value of member engine_temperature
 * @return Value of member engine_temperature
 */
float VehicleDiagnostics::engine_temperature() const
{
    return m_engine_temperature;
}

/*!
 * @brief This function returns a reference to member engine_temperature
 * @return Reference to member engine_temperature
 */
float& VehicleDiagnostics::engine_temperature()
{
    return m_engine_temperature;
}


/*!
 * @brief This function sets a value in member fuel_level
 * @param _fuel_level New value for member fuel_level
 */
void VehicleDiagnostics::fuel_level(
        float _fuel_level)
{
    m_fuel_level = _fuel_level;
}

/*!
 * @brief This function returns the value of member fuel_level
 * @return Value of member fuel_level
 */
float VehicleDiagnostics::fuel_level() const
{
    return m_fuel_level;
}

/*!
 * @brief This function returns a reference to member fuel_level
 * @return Reference to member fuel_level
 */
float& VehicleDiagnostics::fuel_level()
{
    return m_fuel_level;
}


/*!
 * @brief This function sets a value in member battery_voltage
 * @param _battery_voltage New value for member battery_voltage
 */
void VehicleDiagnostics::battery_voltage(
        float _battery_voltage)
{
    m_battery_voltage = _battery_voltage;
}

/*!
 * @brief This function returns the value of member battery_voltage
 * @return Value of member battery_voltage
 */
float VehicleDiagnostics::battery_voltage() const
{
    return m_battery_voltage;
}

/*!
 * @brief This function returns a reference to member battery_voltage
 * @return Reference to member battery_voltage
 */
float& VehicleDiagnostics::battery_voltage()
{
    return m_battery_voltage;
}


/*!
 * @brief This function copies the value in member error_codes
 * @param _error_codes New value to be copied in member error_codes
 */
void VehicleDiagnostics::error_codes(
        const std::vector<ErrorCode>& _error_codes)
{
    m_error_codes = _error_codes;
}

/*!
 * @brief This function moves the value in member error_codes
 * @param _error_codes New value to be moved in member error_codes
 */
void VehicleDiagnostics::error_codes(
        std::vector<ErrorCode>&& _error_codes)
{
    m_error_codes = std::move(_error_codes);
}

/*!
 * @brief This function returns a constant reference to member error_codes
 * @return Constant reference to member error_codes
 */
const std::vector<ErrorCode>& VehicleDiagnostics::error_codes() const
{
    return m_error_codes;
}

/*!
 * @brief This function returns a reference to member error_codes
 * @return Reference to member error_codes
 */
std::vector<ErrorCode>& VehicleDiagnostics::error_codes()
{
    return m_error_codes;
}


// Include auxiliary functions like for serializing/deserializing.
#include "VehicleDiagnosticsCdrAux.ipp"

