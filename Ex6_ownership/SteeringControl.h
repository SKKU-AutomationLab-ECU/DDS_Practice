// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SteeringControl.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_STEERINGCONTROL_H_
#define _FAST_DDS_GENERATED_STEERINGCONTROL_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STEERINGCONTROL_SOURCE)
#define STEERINGCONTROL_DllAPI __declspec( dllexport )
#else
#define STEERINGCONTROL_DllAPI __declspec( dllimport )
#endif // STEERINGCONTROL_SOURCE
#else
#define STEERINGCONTROL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STEERINGCONTROL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure SteeringCommand defined by the user in the IDL file.
 * @ingroup SteeringControl
 */
class SteeringCommand
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SteeringCommand();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SteeringCommand();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SteeringCommand that will be copied.
     */
    eProsima_user_DllExport SteeringCommand(
            const SteeringCommand& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SteeringCommand that will be copied.
     */
    eProsima_user_DllExport SteeringCommand(
            SteeringCommand&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SteeringCommand that will be copied.
     */
    eProsima_user_DllExport SteeringCommand& operator =(
            const SteeringCommand& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SteeringCommand that will be copied.
     */
    eProsima_user_DllExport SteeringCommand& operator =(
            SteeringCommand&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SteeringCommand object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SteeringCommand& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SteeringCommand object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SteeringCommand& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function copies the value in member controller_name
     * @param _controller_name New value to be copied in member controller_name
     */
    eProsima_user_DllExport void controller_name(
            const std::string& _controller_name);

    /*!
     * @brief This function moves the value in member controller_name
     * @param _controller_name New value to be moved in member controller_name
     */
    eProsima_user_DllExport void controller_name(
            std::string&& _controller_name);

    /*!
     * @brief This function returns a constant reference to member controller_name
     * @return Constant reference to member controller_name
     */
    eProsima_user_DllExport const std::string& controller_name() const;

    /*!
     * @brief This function returns a reference to member controller_name
     * @return Reference to member controller_name
     */
    eProsima_user_DllExport std::string& controller_name();


    /*!
     * @brief This function sets a value in member steering_angle
     * @param _steering_angle New value for member steering_angle
     */
    eProsima_user_DllExport void steering_angle(
            float _steering_angle);

    /*!
     * @brief This function returns the value of member steering_angle
     * @return Value of member steering_angle
     */
    eProsima_user_DllExport float steering_angle() const;

    /*!
     * @brief This function returns a reference to member steering_angle
     * @return Reference to member steering_angle
     */
    eProsima_user_DllExport float& steering_angle();


    /*!
     * @brief This function sets a value in member steering_torque
     * @param _steering_torque New value for member steering_torque
     */
    eProsima_user_DllExport void steering_torque(
            float _steering_torque);

    /*!
     * @brief This function returns the value of member steering_torque
     * @return Value of member steering_torque
     */
    eProsima_user_DllExport float steering_torque() const;

    /*!
     * @brief This function returns a reference to member steering_torque
     * @return Reference to member steering_torque
     */
    eProsima_user_DllExport float& steering_torque();


    /*!
     * @brief This function sets a value in member vehicle_speed
     * @param _vehicle_speed New value for member vehicle_speed
     */
    eProsima_user_DllExport void vehicle_speed(
            float _vehicle_speed);

    /*!
     * @brief This function returns the value of member vehicle_speed
     * @return Value of member vehicle_speed
     */
    eProsima_user_DllExport float vehicle_speed() const;

    /*!
     * @brief This function returns a reference to member vehicle_speed
     * @return Reference to member vehicle_speed
     */
    eProsima_user_DllExport float& vehicle_speed();


    /*!
     * @brief This function copies the value in member control_reason
     * @param _control_reason New value to be copied in member control_reason
     */
    eProsima_user_DllExport void control_reason(
            const std::string& _control_reason);

    /*!
     * @brief This function moves the value in member control_reason
     * @param _control_reason New value to be moved in member control_reason
     */
    eProsima_user_DllExport void control_reason(
            std::string&& _control_reason);

    /*!
     * @brief This function returns a constant reference to member control_reason
     * @return Constant reference to member control_reason
     */
    eProsima_user_DllExport const std::string& control_reason() const;

    /*!
     * @brief This function returns a reference to member control_reason
     * @return Reference to member control_reason
     */
    eProsima_user_DllExport std::string& control_reason();


    /*!
     * @brief This function sets a value in member emergency_control
     * @param _emergency_control New value for member emergency_control
     */
    eProsima_user_DllExport void emergency_control(
            bool _emergency_control);

    /*!
     * @brief This function returns the value of member emergency_control
     * @return Value of member emergency_control
     */
    eProsima_user_DllExport bool emergency_control() const;

    /*!
     * @brief This function returns a reference to member emergency_control
     * @return Reference to member emergency_control
     */
    eProsima_user_DllExport bool& emergency_control();

private:

    uint64_t m_timestamp{0};
    std::string m_controller_name;
    float m_steering_angle{0.0};
    float m_steering_torque{0.0};
    float m_vehicle_speed{0.0};
    std::string m_control_reason;
    bool m_emergency_control{false};

};

#endif // _FAST_DDS_GENERATED_STEERINGCONTROL_H_



