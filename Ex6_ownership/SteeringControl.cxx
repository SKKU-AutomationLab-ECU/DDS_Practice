// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file SteeringControl.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "SteeringControl.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




SteeringCommand::SteeringCommand()
{
}

SteeringCommand::~SteeringCommand()
{
}

SteeringCommand::SteeringCommand(
        const SteeringCommand& x)
{
    m_timestamp = x.m_timestamp;
    m_controller_name = x.m_controller_name;
    m_steering_angle = x.m_steering_angle;
    m_steering_torque = x.m_steering_torque;
    m_vehicle_speed = x.m_vehicle_speed;
    m_control_reason = x.m_control_reason;
    m_emergency_control = x.m_emergency_control;
}

SteeringCommand::SteeringCommand(
        SteeringCommand&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_controller_name = std::move(x.m_controller_name);
    m_steering_angle = x.m_steering_angle;
    m_steering_torque = x.m_steering_torque;
    m_vehicle_speed = x.m_vehicle_speed;
    m_control_reason = std::move(x.m_control_reason);
    m_emergency_control = x.m_emergency_control;
}

SteeringCommand& SteeringCommand::operator =(
        const SteeringCommand& x)
{

    m_timestamp = x.m_timestamp;
    m_controller_name = x.m_controller_name;
    m_steering_angle = x.m_steering_angle;
    m_steering_torque = x.m_steering_torque;
    m_vehicle_speed = x.m_vehicle_speed;
    m_control_reason = x.m_control_reason;
    m_emergency_control = x.m_emergency_control;
    return *this;
}

SteeringCommand& SteeringCommand::operator =(
        SteeringCommand&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_controller_name = std::move(x.m_controller_name);
    m_steering_angle = x.m_steering_angle;
    m_steering_torque = x.m_steering_torque;
    m_vehicle_speed = x.m_vehicle_speed;
    m_control_reason = std::move(x.m_control_reason);
    m_emergency_control = x.m_emergency_control;
    return *this;
}

bool SteeringCommand::operator ==(
        const SteeringCommand& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_controller_name == x.m_controller_name &&
           m_steering_angle == x.m_steering_angle &&
           m_steering_torque == x.m_steering_torque &&
           m_vehicle_speed == x.m_vehicle_speed &&
           m_control_reason == x.m_control_reason &&
           m_emergency_control == x.m_emergency_control);
}

bool SteeringCommand::operator !=(
        const SteeringCommand& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void SteeringCommand::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t SteeringCommand::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& SteeringCommand::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member controller_name
 * @param _controller_name New value to be copied in member controller_name
 */
void SteeringCommand::controller_name(
        const std::string& _controller_name)
{
    m_controller_name = _controller_name;
}

/*!
 * @brief This function moves the value in member controller_name
 * @param _controller_name New value to be moved in member controller_name
 */
void SteeringCommand::controller_name(
        std::string&& _controller_name)
{
    m_controller_name = std::move(_controller_name);
}

/*!
 * @brief This function returns a constant reference to member controller_name
 * @return Constant reference to member controller_name
 */
const std::string& SteeringCommand::controller_name() const
{
    return m_controller_name;
}

/*!
 * @brief This function returns a reference to member controller_name
 * @return Reference to member controller_name
 */
std::string& SteeringCommand::controller_name()
{
    return m_controller_name;
}


/*!
 * @brief This function sets a value in member steering_angle
 * @param _steering_angle New value for member steering_angle
 */
void SteeringCommand::steering_angle(
        float _steering_angle)
{
    m_steering_angle = _steering_angle;
}

/*!
 * @brief This function returns the value of member steering_angle
 * @return Value of member steering_angle
 */
float SteeringCommand::steering_angle() const
{
    return m_steering_angle;
}

/*!
 * @brief This function returns a reference to member steering_angle
 * @return Reference to member steering_angle
 */
float& SteeringCommand::steering_angle()
{
    return m_steering_angle;
}


/*!
 * @brief This function sets a value in member steering_torque
 * @param _steering_torque New value for member steering_torque
 */
void SteeringCommand::steering_torque(
        float _steering_torque)
{
    m_steering_torque = _steering_torque;
}

/*!
 * @brief This function returns the value of member steering_torque
 * @return Value of member steering_torque
 */
float SteeringCommand::steering_torque() const
{
    return m_steering_torque;
}

/*!
 * @brief This function returns a reference to member steering_torque
 * @return Reference to member steering_torque
 */
float& SteeringCommand::steering_torque()
{
    return m_steering_torque;
}


/*!
 * @brief This function sets a value in member vehicle_speed
 * @param _vehicle_speed New value for member vehicle_speed
 */
void SteeringCommand::vehicle_speed(
        float _vehicle_speed)
{
    m_vehicle_speed = _vehicle_speed;
}

/*!
 * @brief This function returns the value of member vehicle_speed
 * @return Value of member vehicle_speed
 */
float SteeringCommand::vehicle_speed() const
{
    return m_vehicle_speed;
}

/*!
 * @brief This function returns a reference to member vehicle_speed
 * @return Reference to member vehicle_speed
 */
float& SteeringCommand::vehicle_speed()
{
    return m_vehicle_speed;
}


/*!
 * @brief This function copies the value in member control_reason
 * @param _control_reason New value to be copied in member control_reason
 */
void SteeringCommand::control_reason(
        const std::string& _control_reason)
{
    m_control_reason = _control_reason;
}

/*!
 * @brief This function moves the value in member control_reason
 * @param _control_reason New value to be moved in member control_reason
 */
void SteeringCommand::control_reason(
        std::string&& _control_reason)
{
    m_control_reason = std::move(_control_reason);
}

/*!
 * @brief This function returns a constant reference to member control_reason
 * @return Constant reference to member control_reason
 */
const std::string& SteeringCommand::control_reason() const
{
    return m_control_reason;
}

/*!
 * @brief This function returns a reference to member control_reason
 * @return Reference to member control_reason
 */
std::string& SteeringCommand::control_reason()
{
    return m_control_reason;
}


/*!
 * @brief This function sets a value in member emergency_control
 * @param _emergency_control New value for member emergency_control
 */
void SteeringCommand::emergency_control(
        bool _emergency_control)
{
    m_emergency_control = _emergency_control;
}

/*!
 * @brief This function returns the value of member emergency_control
 * @return Value of member emergency_control
 */
bool SteeringCommand::emergency_control() const
{
    return m_emergency_control;
}

/*!
 * @brief This function returns a reference to member emergency_control
 * @return Reference to member emergency_control
 */
bool& SteeringCommand::emergency_control()
{
    return m_emergency_control;
}


// Include auxiliary functions like for serializing/deserializing.
#include "SteeringControlCdrAux.ipp"

