// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ServiceDiscovery.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_SERVICEDISCOVERY_H_
#define _FAST_DDS_GENERATED_SERVICEDISCOVERY_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(SERVICEDISCOVERY_SOURCE)
#define SERVICEDISCOVERY_DllAPI __declspec( dllexport )
#else
#define SERVICEDISCOVERY_DllAPI __declspec( dllimport )
#endif // SERVICEDISCOVERY_SOURCE
#else
#define SERVICEDISCOVERY_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define SERVICEDISCOVERY_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure ServiceInfo defined by the user in the IDL file.
 * @ingroup ServiceDiscovery
 */
class ServiceInfo
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ServiceInfo();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ServiceInfo();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ServiceInfo that will be copied.
     */
    eProsima_user_DllExport ServiceInfo(
            const ServiceInfo& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ServiceInfo that will be copied.
     */
    eProsima_user_DllExport ServiceInfo(
            ServiceInfo&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ServiceInfo that will be copied.
     */
    eProsima_user_DllExport ServiceInfo& operator =(
            const ServiceInfo& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ServiceInfo that will be copied.
     */
    eProsima_user_DllExport ServiceInfo& operator =(
            ServiceInfo&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ServiceInfo object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ServiceInfo& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ServiceInfo object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ServiceInfo& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function copies the value in member service_name
     * @param _service_name New value to be copied in member service_name
     */
    eProsima_user_DllExport void service_name(
            const std::string& _service_name);

    /*!
     * @brief This function moves the value in member service_name
     * @param _service_name New value to be moved in member service_name
     */
    eProsima_user_DllExport void service_name(
            std::string&& _service_name);

    /*!
     * @brief This function returns a constant reference to member service_name
     * @return Constant reference to member service_name
     */
    eProsima_user_DllExport const std::string& service_name() const;

    /*!
     * @brief This function returns a reference to member service_name
     * @return Reference to member service_name
     */
    eProsima_user_DllExport std::string& service_name();


    /*!
     * @brief This function copies the value in member service_type
     * @param _service_type New value to be copied in member service_type
     */
    eProsima_user_DllExport void service_type(
            const std::string& _service_type);

    /*!
     * @brief This function moves the value in member service_type
     * @param _service_type New value to be moved in member service_type
     */
    eProsima_user_DllExport void service_type(
            std::string&& _service_type);

    /*!
     * @brief This function returns a constant reference to member service_type
     * @return Constant reference to member service_type
     */
    eProsima_user_DllExport const std::string& service_type() const;

    /*!
     * @brief This function returns a reference to member service_type
     * @return Reference to member service_type
     */
    eProsima_user_DllExport std::string& service_type();


    /*!
     * @brief This function copies the value in member endpoint
     * @param _endpoint New value to be copied in member endpoint
     */
    eProsima_user_DllExport void endpoint(
            const std::string& _endpoint);

    /*!
     * @brief This function moves the value in member endpoint
     * @param _endpoint New value to be moved in member endpoint
     */
    eProsima_user_DllExport void endpoint(
            std::string&& _endpoint);

    /*!
     * @brief This function returns a constant reference to member endpoint
     * @return Constant reference to member endpoint
     */
    eProsima_user_DllExport const std::string& endpoint() const;

    /*!
     * @brief This function returns a reference to member endpoint
     * @return Reference to member endpoint
     */
    eProsima_user_DllExport std::string& endpoint();


    /*!
     * @brief This function sets a value in member port
     * @param _port New value for member port
     */
    eProsima_user_DllExport void port(
            uint32_t _port);

    /*!
     * @brief This function returns the value of member port
     * @return Value of member port
     */
    eProsima_user_DllExport uint32_t port() const;

    /*!
     * @brief This function returns a reference to member port
     * @return Reference to member port
     */
    eProsima_user_DllExport uint32_t& port();


    /*!
     * @brief This function copies the value in member status
     * @param _status New value to be copied in member status
     */
    eProsima_user_DllExport void status(
            const std::string& _status);

    /*!
     * @brief This function moves the value in member status
     * @param _status New value to be moved in member status
     */
    eProsima_user_DllExport void status(
            std::string&& _status);

    /*!
     * @brief This function returns a constant reference to member status
     * @return Constant reference to member status
     */
    eProsima_user_DllExport const std::string& status() const;

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport std::string& status();


    /*!
     * @brief This function copies the value in member capabilities
     * @param _capabilities New value to be copied in member capabilities
     */
    eProsima_user_DllExport void capabilities(
            const std::vector<std::string>& _capabilities);

    /*!
     * @brief This function moves the value in member capabilities
     * @param _capabilities New value to be moved in member capabilities
     */
    eProsima_user_DllExport void capabilities(
            std::vector<std::string>&& _capabilities);

    /*!
     * @brief This function returns a constant reference to member capabilities
     * @return Constant reference to member capabilities
     */
    eProsima_user_DllExport const std::vector<std::string>& capabilities() const;

    /*!
     * @brief This function returns a reference to member capabilities
     * @return Reference to member capabilities
     */
    eProsima_user_DllExport std::vector<std::string>& capabilities();


    /*!
     * @brief This function sets a value in member is_healthy
     * @param _is_healthy New value for member is_healthy
     */
    eProsima_user_DllExport void is_healthy(
            bool _is_healthy);

    /*!
     * @brief This function returns the value of member is_healthy
     * @return Value of member is_healthy
     */
    eProsima_user_DllExport bool is_healthy() const;

    /*!
     * @brief This function returns a reference to member is_healthy
     * @return Reference to member is_healthy
     */
    eProsima_user_DllExport bool& is_healthy();

private:

    uint64_t m_timestamp{0};
    std::string m_service_name;
    std::string m_service_type;
    std::string m_endpoint;
    uint32_t m_port{0};
    std::string m_status;
    std::vector<std::string> m_capabilities;
    bool m_is_healthy{false};

};

#endif // _FAST_DDS_GENERATED_SERVICEDISCOVERY_H_



