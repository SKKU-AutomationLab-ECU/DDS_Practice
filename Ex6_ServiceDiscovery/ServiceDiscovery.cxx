// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ServiceDiscovery.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ServiceDiscovery.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




ServiceInfo::ServiceInfo()
{
}

ServiceInfo::~ServiceInfo()
{
}

ServiceInfo::ServiceInfo(
        const ServiceInfo& x)
{
    m_timestamp = x.m_timestamp;
    m_service_name = x.m_service_name;
    m_service_type = x.m_service_type;
    m_endpoint = x.m_endpoint;
    m_port = x.m_port;
    m_status = x.m_status;
    m_capabilities = x.m_capabilities;
    m_is_healthy = x.m_is_healthy;
}

ServiceInfo::ServiceInfo(
        ServiceInfo&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_service_name = std::move(x.m_service_name);
    m_service_type = std::move(x.m_service_type);
    m_endpoint = std::move(x.m_endpoint);
    m_port = x.m_port;
    m_status = std::move(x.m_status);
    m_capabilities = std::move(x.m_capabilities);
    m_is_healthy = x.m_is_healthy;
}

ServiceInfo& ServiceInfo::operator =(
        const ServiceInfo& x)
{

    m_timestamp = x.m_timestamp;
    m_service_name = x.m_service_name;
    m_service_type = x.m_service_type;
    m_endpoint = x.m_endpoint;
    m_port = x.m_port;
    m_status = x.m_status;
    m_capabilities = x.m_capabilities;
    m_is_healthy = x.m_is_healthy;
    return *this;
}

ServiceInfo& ServiceInfo::operator =(
        ServiceInfo&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_service_name = std::move(x.m_service_name);
    m_service_type = std::move(x.m_service_type);
    m_endpoint = std::move(x.m_endpoint);
    m_port = x.m_port;
    m_status = std::move(x.m_status);
    m_capabilities = std::move(x.m_capabilities);
    m_is_healthy = x.m_is_healthy;
    return *this;
}

bool ServiceInfo::operator ==(
        const ServiceInfo& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_service_name == x.m_service_name &&
           m_service_type == x.m_service_type &&
           m_endpoint == x.m_endpoint &&
           m_port == x.m_port &&
           m_status == x.m_status &&
           m_capabilities == x.m_capabilities &&
           m_is_healthy == x.m_is_healthy);
}

bool ServiceInfo::operator !=(
        const ServiceInfo& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ServiceInfo::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t ServiceInfo::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& ServiceInfo::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function copies the value in member service_name
 * @param _service_name New value to be copied in member service_name
 */
void ServiceInfo::service_name(
        const std::string& _service_name)
{
    m_service_name = _service_name;
}

/*!
 * @brief This function moves the value in member service_name
 * @param _service_name New value to be moved in member service_name
 */
void ServiceInfo::service_name(
        std::string&& _service_name)
{
    m_service_name = std::move(_service_name);
}

/*!
 * @brief This function returns a constant reference to member service_name
 * @return Constant reference to member service_name
 */
const std::string& ServiceInfo::service_name() const
{
    return m_service_name;
}

/*!
 * @brief This function returns a reference to member service_name
 * @return Reference to member service_name
 */
std::string& ServiceInfo::service_name()
{
    return m_service_name;
}


/*!
 * @brief This function copies the value in member service_type
 * @param _service_type New value to be copied in member service_type
 */
void ServiceInfo::service_type(
        const std::string& _service_type)
{
    m_service_type = _service_type;
}

/*!
 * @brief This function moves the value in member service_type
 * @param _service_type New value to be moved in member service_type
 */
void ServiceInfo::service_type(
        std::string&& _service_type)
{
    m_service_type = std::move(_service_type);
}

/*!
 * @brief This function returns a constant reference to member service_type
 * @return Constant reference to member service_type
 */
const std::string& ServiceInfo::service_type() const
{
    return m_service_type;
}

/*!
 * @brief This function returns a reference to member service_type
 * @return Reference to member service_type
 */
std::string& ServiceInfo::service_type()
{
    return m_service_type;
}


/*!
 * @brief This function copies the value in member endpoint
 * @param _endpoint New value to be copied in member endpoint
 */
void ServiceInfo::endpoint(
        const std::string& _endpoint)
{
    m_endpoint = _endpoint;
}

/*!
 * @brief This function moves the value in member endpoint
 * @param _endpoint New value to be moved in member endpoint
 */
void ServiceInfo::endpoint(
        std::string&& _endpoint)
{
    m_endpoint = std::move(_endpoint);
}

/*!
 * @brief This function returns a constant reference to member endpoint
 * @return Constant reference to member endpoint
 */
const std::string& ServiceInfo::endpoint() const
{
    return m_endpoint;
}

/*!
 * @brief This function returns a reference to member endpoint
 * @return Reference to member endpoint
 */
std::string& ServiceInfo::endpoint()
{
    return m_endpoint;
}


/*!
 * @brief This function sets a value in member port
 * @param _port New value for member port
 */
void ServiceInfo::port(
        uint32_t _port)
{
    m_port = _port;
}

/*!
 * @brief This function returns the value of member port
 * @return Value of member port
 */
uint32_t ServiceInfo::port() const
{
    return m_port;
}

/*!
 * @brief This function returns a reference to member port
 * @return Reference to member port
 */
uint32_t& ServiceInfo::port()
{
    return m_port;
}


/*!
 * @brief This function copies the value in member status
 * @param _status New value to be copied in member status
 */
void ServiceInfo::status(
        const std::string& _status)
{
    m_status = _status;
}

/*!
 * @brief This function moves the value in member status
 * @param _status New value to be moved in member status
 */
void ServiceInfo::status(
        std::string&& _status)
{
    m_status = std::move(_status);
}

/*!
 * @brief This function returns a constant reference to member status
 * @return Constant reference to member status
 */
const std::string& ServiceInfo::status() const
{
    return m_status;
}

/*!
 * @brief This function returns a reference to member status
 * @return Reference to member status
 */
std::string& ServiceInfo::status()
{
    return m_status;
}


/*!
 * @brief This function copies the value in member capabilities
 * @param _capabilities New value to be copied in member capabilities
 */
void ServiceInfo::capabilities(
        const std::vector<std::string>& _capabilities)
{
    m_capabilities = _capabilities;
}

/*!
 * @brief This function moves the value in member capabilities
 * @param _capabilities New value to be moved in member capabilities
 */
void ServiceInfo::capabilities(
        std::vector<std::string>&& _capabilities)
{
    m_capabilities = std::move(_capabilities);
}

/*!
 * @brief This function returns a constant reference to member capabilities
 * @return Constant reference to member capabilities
 */
const std::vector<std::string>& ServiceInfo::capabilities() const
{
    return m_capabilities;
}

/*!
 * @brief This function returns a reference to member capabilities
 * @return Reference to member capabilities
 */
std::vector<std::string>& ServiceInfo::capabilities()
{
    return m_capabilities;
}


/*!
 * @brief This function sets a value in member is_healthy
 * @param _is_healthy New value for member is_healthy
 */
void ServiceInfo::is_healthy(
        bool _is_healthy)
{
    m_is_healthy = _is_healthy;
}

/*!
 * @brief This function returns the value of member is_healthy
 * @return Value of member is_healthy
 */
bool ServiceInfo::is_healthy() const
{
    return m_is_healthy;
}

/*!
 * @brief This function returns a reference to member is_healthy
 * @return Reference to member is_healthy
 */
bool& ServiceInfo::is_healthy()
{
    return m_is_healthy;
}


// Include auxiliary functions like for serializing/deserializing.
#include "ServiceDiscoveryCdrAux.ipp"

