// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleSystems.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "VehicleSystems.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






PowertrainData::PowertrainData()
{
}

PowertrainData::~PowertrainData()
{
}

PowertrainData::PowertrainData(
        const PowertrainData& x)
{
    m_timestamp = x.m_timestamp;
    m_engine_rpm = x.m_engine_rpm;
    m_engine_temperature = x.m_engine_temperature;
    m_engine_load = x.m_engine_load;
    m_transmission_temp = x.m_transmission_temp;
    m_current_gear = x.m_current_gear;
    m_throttle_position = x.m_throttle_position;
    m_dtc_codes = x.m_dtc_codes;
}

PowertrainData::PowertrainData(
        PowertrainData&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_engine_rpm = x.m_engine_rpm;
    m_engine_temperature = x.m_engine_temperature;
    m_engine_load = x.m_engine_load;
    m_transmission_temp = x.m_transmission_temp;
    m_current_gear = x.m_current_gear;
    m_throttle_position = x.m_throttle_position;
    m_dtc_codes = std::move(x.m_dtc_codes);
}

PowertrainData& PowertrainData::operator =(
        const PowertrainData& x)
{

    m_timestamp = x.m_timestamp;
    m_engine_rpm = x.m_engine_rpm;
    m_engine_temperature = x.m_engine_temperature;
    m_engine_load = x.m_engine_load;
    m_transmission_temp = x.m_transmission_temp;
    m_current_gear = x.m_current_gear;
    m_throttle_position = x.m_throttle_position;
    m_dtc_codes = x.m_dtc_codes;
    return *this;
}

PowertrainData& PowertrainData::operator =(
        PowertrainData&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_engine_rpm = x.m_engine_rpm;
    m_engine_temperature = x.m_engine_temperature;
    m_engine_load = x.m_engine_load;
    m_transmission_temp = x.m_transmission_temp;
    m_current_gear = x.m_current_gear;
    m_throttle_position = x.m_throttle_position;
    m_dtc_codes = std::move(x.m_dtc_codes);
    return *this;
}

bool PowertrainData::operator ==(
        const PowertrainData& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_engine_rpm == x.m_engine_rpm &&
           m_engine_temperature == x.m_engine_temperature &&
           m_engine_load == x.m_engine_load &&
           m_transmission_temp == x.m_transmission_temp &&
           m_current_gear == x.m_current_gear &&
           m_throttle_position == x.m_throttle_position &&
           m_dtc_codes == x.m_dtc_codes);
}

bool PowertrainData::operator !=(
        const PowertrainData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void PowertrainData::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t PowertrainData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& PowertrainData::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member engine_rpm
 * @param _engine_rpm New value for member engine_rpm
 */
void PowertrainData::engine_rpm(
        float _engine_rpm)
{
    m_engine_rpm = _engine_rpm;
}

/*!
 * @brief This function returns the value of member engine_rpm
 * @return Value of member engine_rpm
 */
float PowertrainData::engine_rpm() const
{
    return m_engine_rpm;
}

/*!
 * @brief This function returns a reference to member engine_rpm
 * @return Reference to member engine_rpm
 */
float& PowertrainData::engine_rpm()
{
    return m_engine_rpm;
}


/*!
 * @brief This function sets a value in member engine_temperature
 * @param _engine_temperature New value for member engine_temperature
 */
void PowertrainData::engine_temperature(
        float _engine_temperature)
{
    m_engine_temperature = _engine_temperature;
}

/*!
 * @brief This function returns the value of member engine_temperature
 * @return Value of member engine_temperature
 */
float PowertrainData::engine_temperature() const
{
    return m_engine_temperature;
}

/*!
 * @brief This function returns a reference to member engine_temperature
 * @return Reference to member engine_temperature
 */
float& PowertrainData::engine_temperature()
{
    return m_engine_temperature;
}


/*!
 * @brief This function sets a value in member engine_load
 * @param _engine_load New value for member engine_load
 */
void PowertrainData::engine_load(
        float _engine_load)
{
    m_engine_load = _engine_load;
}

/*!
 * @brief This function returns the value of member engine_load
 * @return Value of member engine_load
 */
float PowertrainData::engine_load() const
{
    return m_engine_load;
}

/*!
 * @brief This function returns a reference to member engine_load
 * @return Reference to member engine_load
 */
float& PowertrainData::engine_load()
{
    return m_engine_load;
}


/*!
 * @brief This function sets a value in member transmission_temp
 * @param _transmission_temp New value for member transmission_temp
 */
void PowertrainData::transmission_temp(
        float _transmission_temp)
{
    m_transmission_temp = _transmission_temp;
}

/*!
 * @brief This function returns the value of member transmission_temp
 * @return Value of member transmission_temp
 */
float PowertrainData::transmission_temp() const
{
    return m_transmission_temp;
}

/*!
 * @brief This function returns a reference to member transmission_temp
 * @return Reference to member transmission_temp
 */
float& PowertrainData::transmission_temp()
{
    return m_transmission_temp;
}


/*!
 * @brief This function sets a value in member current_gear
 * @param _current_gear New value for member current_gear
 */
void PowertrainData::current_gear(
        int32_t _current_gear)
{
    m_current_gear = _current_gear;
}

/*!
 * @brief This function returns the value of member current_gear
 * @return Value of member current_gear
 */
int32_t PowertrainData::current_gear() const
{
    return m_current_gear;
}

/*!
 * @brief This function returns a reference to member current_gear
 * @return Reference to member current_gear
 */
int32_t& PowertrainData::current_gear()
{
    return m_current_gear;
}


/*!
 * @brief This function sets a value in member throttle_position
 * @param _throttle_position New value for member throttle_position
 */
void PowertrainData::throttle_position(
        float _throttle_position)
{
    m_throttle_position = _throttle_position;
}

/*!
 * @brief This function returns the value of member throttle_position
 * @return Value of member throttle_position
 */
float PowertrainData::throttle_position() const
{
    return m_throttle_position;
}

/*!
 * @brief This function returns a reference to member throttle_position
 * @return Reference to member throttle_position
 */
float& PowertrainData::throttle_position()
{
    return m_throttle_position;
}


/*!
 * @brief This function copies the value in member dtc_codes
 * @param _dtc_codes New value to be copied in member dtc_codes
 */
void PowertrainData::dtc_codes(
        const std::vector<std::string>& _dtc_codes)
{
    m_dtc_codes = _dtc_codes;
}

/*!
 * @brief This function moves the value in member dtc_codes
 * @param _dtc_codes New value to be moved in member dtc_codes
 */
void PowertrainData::dtc_codes(
        std::vector<std::string>&& _dtc_codes)
{
    m_dtc_codes = std::move(_dtc_codes);
}

/*!
 * @brief This function returns a constant reference to member dtc_codes
 * @return Constant reference to member dtc_codes
 */
const std::vector<std::string>& PowertrainData::dtc_codes() const
{
    return m_dtc_codes;
}

/*!
 * @brief This function returns a reference to member dtc_codes
 * @return Reference to member dtc_codes
 */
std::vector<std::string>& PowertrainData::dtc_codes()
{
    return m_dtc_codes;
}




ChassisData::ChassisData()
{
}

ChassisData::~ChassisData()
{
}

ChassisData::ChassisData(
        const ChassisData& x)
{
    m_timestamp = x.m_timestamp;
    m_brake_pressure = x.m_brake_pressure;
    m_steering_angle = x.m_steering_angle;
    m_suspension_height = x.m_suspension_height;
    m_wheel_speed = x.m_wheel_speed;
    m_brake_pad_wear = x.m_brake_pad_wear;
    m_abs_active = x.m_abs_active;
    m_traction_control_active = x.m_traction_control_active;
}

ChassisData::ChassisData(
        ChassisData&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_brake_pressure = x.m_brake_pressure;
    m_steering_angle = x.m_steering_angle;
    m_suspension_height = std::move(x.m_suspension_height);
    m_wheel_speed = std::move(x.m_wheel_speed);
    m_brake_pad_wear = std::move(x.m_brake_pad_wear);
    m_abs_active = x.m_abs_active;
    m_traction_control_active = x.m_traction_control_active;
}

ChassisData& ChassisData::operator =(
        const ChassisData& x)
{

    m_timestamp = x.m_timestamp;
    m_brake_pressure = x.m_brake_pressure;
    m_steering_angle = x.m_steering_angle;
    m_suspension_height = x.m_suspension_height;
    m_wheel_speed = x.m_wheel_speed;
    m_brake_pad_wear = x.m_brake_pad_wear;
    m_abs_active = x.m_abs_active;
    m_traction_control_active = x.m_traction_control_active;
    return *this;
}

ChassisData& ChassisData::operator =(
        ChassisData&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_brake_pressure = x.m_brake_pressure;
    m_steering_angle = x.m_steering_angle;
    m_suspension_height = std::move(x.m_suspension_height);
    m_wheel_speed = std::move(x.m_wheel_speed);
    m_brake_pad_wear = std::move(x.m_brake_pad_wear);
    m_abs_active = x.m_abs_active;
    m_traction_control_active = x.m_traction_control_active;
    return *this;
}

bool ChassisData::operator ==(
        const ChassisData& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_brake_pressure == x.m_brake_pressure &&
           m_steering_angle == x.m_steering_angle &&
           m_suspension_height == x.m_suspension_height &&
           m_wheel_speed == x.m_wheel_speed &&
           m_brake_pad_wear == x.m_brake_pad_wear &&
           m_abs_active == x.m_abs_active &&
           m_traction_control_active == x.m_traction_control_active);
}

bool ChassisData::operator !=(
        const ChassisData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ChassisData::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t ChassisData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& ChassisData::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member brake_pressure
 * @param _brake_pressure New value for member brake_pressure
 */
void ChassisData::brake_pressure(
        float _brake_pressure)
{
    m_brake_pressure = _brake_pressure;
}

/*!
 * @brief This function returns the value of member brake_pressure
 * @return Value of member brake_pressure
 */
float ChassisData::brake_pressure() const
{
    return m_brake_pressure;
}

/*!
 * @brief This function returns a reference to member brake_pressure
 * @return Reference to member brake_pressure
 */
float& ChassisData::brake_pressure()
{
    return m_brake_pressure;
}


/*!
 * @brief This function sets a value in member steering_angle
 * @param _steering_angle New value for member steering_angle
 */
void ChassisData::steering_angle(
        float _steering_angle)
{
    m_steering_angle = _steering_angle;
}

/*!
 * @brief This function returns the value of member steering_angle
 * @return Value of member steering_angle
 */
float ChassisData::steering_angle() const
{
    return m_steering_angle;
}

/*!
 * @brief This function returns a reference to member steering_angle
 * @return Reference to member steering_angle
 */
float& ChassisData::steering_angle()
{
    return m_steering_angle;
}


/*!
 * @brief This function copies the value in member suspension_height
 * @param _suspension_height New value to be copied in member suspension_height
 */
void ChassisData::suspension_height(
        const std::array<float, 4>& _suspension_height)
{
    m_suspension_height = _suspension_height;
}

/*!
 * @brief This function moves the value in member suspension_height
 * @param _suspension_height New value to be moved in member suspension_height
 */
void ChassisData::suspension_height(
        std::array<float, 4>&& _suspension_height)
{
    m_suspension_height = std::move(_suspension_height);
}

/*!
 * @brief This function returns a constant reference to member suspension_height
 * @return Constant reference to member suspension_height
 */
const std::array<float, 4>& ChassisData::suspension_height() const
{
    return m_suspension_height;
}

/*!
 * @brief This function returns a reference to member suspension_height
 * @return Reference to member suspension_height
 */
std::array<float, 4>& ChassisData::suspension_height()
{
    return m_suspension_height;
}


/*!
 * @brief This function copies the value in member wheel_speed
 * @param _wheel_speed New value to be copied in member wheel_speed
 */
void ChassisData::wheel_speed(
        const std::array<float, 4>& _wheel_speed)
{
    m_wheel_speed = _wheel_speed;
}

/*!
 * @brief This function moves the value in member wheel_speed
 * @param _wheel_speed New value to be moved in member wheel_speed
 */
void ChassisData::wheel_speed(
        std::array<float, 4>&& _wheel_speed)
{
    m_wheel_speed = std::move(_wheel_speed);
}

/*!
 * @brief This function returns a constant reference to member wheel_speed
 * @return Constant reference to member wheel_speed
 */
const std::array<float, 4>& ChassisData::wheel_speed() const
{
    return m_wheel_speed;
}

/*!
 * @brief This function returns a reference to member wheel_speed
 * @return Reference to member wheel_speed
 */
std::array<float, 4>& ChassisData::wheel_speed()
{
    return m_wheel_speed;
}


/*!
 * @brief This function copies the value in member brake_pad_wear
 * @param _brake_pad_wear New value to be copied in member brake_pad_wear
 */
void ChassisData::brake_pad_wear(
        const std::array<float, 4>& _brake_pad_wear)
{
    m_brake_pad_wear = _brake_pad_wear;
}

/*!
 * @brief This function moves the value in member brake_pad_wear
 * @param _brake_pad_wear New value to be moved in member brake_pad_wear
 */
void ChassisData::brake_pad_wear(
        std::array<float, 4>&& _brake_pad_wear)
{
    m_brake_pad_wear = std::move(_brake_pad_wear);
}

/*!
 * @brief This function returns a constant reference to member brake_pad_wear
 * @return Constant reference to member brake_pad_wear
 */
const std::array<float, 4>& ChassisData::brake_pad_wear() const
{
    return m_brake_pad_wear;
}

/*!
 * @brief This function returns a reference to member brake_pad_wear
 * @return Reference to member brake_pad_wear
 */
std::array<float, 4>& ChassisData::brake_pad_wear()
{
    return m_brake_pad_wear;
}


/*!
 * @brief This function sets a value in member abs_active
 * @param _abs_active New value for member abs_active
 */
void ChassisData::abs_active(
        bool _abs_active)
{
    m_abs_active = _abs_active;
}

/*!
 * @brief This function returns the value of member abs_active
 * @return Value of member abs_active
 */
bool ChassisData::abs_active() const
{
    return m_abs_active;
}

/*!
 * @brief This function returns a reference to member abs_active
 * @return Reference to member abs_active
 */
bool& ChassisData::abs_active()
{
    return m_abs_active;
}


/*!
 * @brief This function sets a value in member traction_control_active
 * @param _traction_control_active New value for member traction_control_active
 */
void ChassisData::traction_control_active(
        bool _traction_control_active)
{
    m_traction_control_active = _traction_control_active;
}

/*!
 * @brief This function returns the value of member traction_control_active
 * @return Value of member traction_control_active
 */
bool ChassisData::traction_control_active() const
{
    return m_traction_control_active;
}

/*!
 * @brief This function returns a reference to member traction_control_active
 * @return Reference to member traction_control_active
 */
bool& ChassisData::traction_control_active()
{
    return m_traction_control_active;
}




BatteryData::BatteryData()
{
}

BatteryData::~BatteryData()
{
}

BatteryData::BatteryData(
        const BatteryData& x)
{
    m_timestamp = x.m_timestamp;
    m_voltage = x.m_voltage;
    m_current = x.m_current;
    m_temperature = x.m_temperature;
    m_state_of_charge = x.m_state_of_charge;
    m_power_consumption = x.m_power_consumption;
    m_charging_cycles = x.m_charging_cycles;
    m_charging_status = x.m_charging_status;
}

BatteryData::BatteryData(
        BatteryData&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_voltage = x.m_voltage;
    m_current = x.m_current;
    m_temperature = x.m_temperature;
    m_state_of_charge = x.m_state_of_charge;
    m_power_consumption = x.m_power_consumption;
    m_charging_cycles = x.m_charging_cycles;
    m_charging_status = x.m_charging_status;
}

BatteryData& BatteryData::operator =(
        const BatteryData& x)
{

    m_timestamp = x.m_timestamp;
    m_voltage = x.m_voltage;
    m_current = x.m_current;
    m_temperature = x.m_temperature;
    m_state_of_charge = x.m_state_of_charge;
    m_power_consumption = x.m_power_consumption;
    m_charging_cycles = x.m_charging_cycles;
    m_charging_status = x.m_charging_status;
    return *this;
}

BatteryData& BatteryData::operator =(
        BatteryData&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_voltage = x.m_voltage;
    m_current = x.m_current;
    m_temperature = x.m_temperature;
    m_state_of_charge = x.m_state_of_charge;
    m_power_consumption = x.m_power_consumption;
    m_charging_cycles = x.m_charging_cycles;
    m_charging_status = x.m_charging_status;
    return *this;
}

bool BatteryData::operator ==(
        const BatteryData& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_voltage == x.m_voltage &&
           m_current == x.m_current &&
           m_temperature == x.m_temperature &&
           m_state_of_charge == x.m_state_of_charge &&
           m_power_consumption == x.m_power_consumption &&
           m_charging_cycles == x.m_charging_cycles &&
           m_charging_status == x.m_charging_status);
}

bool BatteryData::operator !=(
        const BatteryData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void BatteryData::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t BatteryData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& BatteryData::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member voltage
 * @param _voltage New value for member voltage
 */
void BatteryData::voltage(
        float _voltage)
{
    m_voltage = _voltage;
}

/*!
 * @brief This function returns the value of member voltage
 * @return Value of member voltage
 */
float BatteryData::voltage() const
{
    return m_voltage;
}

/*!
 * @brief This function returns a reference to member voltage
 * @return Reference to member voltage
 */
float& BatteryData::voltage()
{
    return m_voltage;
}


/*!
 * @brief This function sets a value in member current
 * @param _current New value for member current
 */
void BatteryData::current(
        float _current)
{
    m_current = _current;
}

/*!
 * @brief This function returns the value of member current
 * @return Value of member current
 */
float BatteryData::current() const
{
    return m_current;
}

/*!
 * @brief This function returns a reference to member current
 * @return Reference to member current
 */
float& BatteryData::current()
{
    return m_current;
}


/*!
 * @brief This function sets a value in member temperature
 * @param _temperature New value for member temperature
 */
void BatteryData::temperature(
        float _temperature)
{
    m_temperature = _temperature;
}

/*!
 * @brief This function returns the value of member temperature
 * @return Value of member temperature
 */
float BatteryData::temperature() const
{
    return m_temperature;
}

/*!
 * @brief This function returns a reference to member temperature
 * @return Reference to member temperature
 */
float& BatteryData::temperature()
{
    return m_temperature;
}


/*!
 * @brief This function sets a value in member state_of_charge
 * @param _state_of_charge New value for member state_of_charge
 */
void BatteryData::state_of_charge(
        float _state_of_charge)
{
    m_state_of_charge = _state_of_charge;
}

/*!
 * @brief This function returns the value of member state_of_charge
 * @return Value of member state_of_charge
 */
float BatteryData::state_of_charge() const
{
    return m_state_of_charge;
}

/*!
 * @brief This function returns a reference to member state_of_charge
 * @return Reference to member state_of_charge
 */
float& BatteryData::state_of_charge()
{
    return m_state_of_charge;
}


/*!
 * @brief This function sets a value in member power_consumption
 * @param _power_consumption New value for member power_consumption
 */
void BatteryData::power_consumption(
        float _power_consumption)
{
    m_power_consumption = _power_consumption;
}

/*!
 * @brief This function returns the value of member power_consumption
 * @return Value of member power_consumption
 */
float BatteryData::power_consumption() const
{
    return m_power_consumption;
}

/*!
 * @brief This function returns a reference to member power_consumption
 * @return Reference to member power_consumption
 */
float& BatteryData::power_consumption()
{
    return m_power_consumption;
}


/*!
 * @brief This function sets a value in member charging_cycles
 * @param _charging_cycles New value for member charging_cycles
 */
void BatteryData::charging_cycles(
        int32_t _charging_cycles)
{
    m_charging_cycles = _charging_cycles;
}

/*!
 * @brief This function returns the value of member charging_cycles
 * @return Value of member charging_cycles
 */
int32_t BatteryData::charging_cycles() const
{
    return m_charging_cycles;
}

/*!
 * @brief This function returns a reference to member charging_cycles
 * @return Reference to member charging_cycles
 */
int32_t& BatteryData::charging_cycles()
{
    return m_charging_cycles;
}


/*!
 * @brief This function sets a value in member charging_status
 * @param _charging_status New value for member charging_status
 */
void BatteryData::charging_status(
        bool _charging_status)
{
    m_charging_status = _charging_status;
}

/*!
 * @brief This function returns the value of member charging_status
 * @return Value of member charging_status
 */
bool BatteryData::charging_status() const
{
    return m_charging_status;
}

/*!
 * @brief This function returns a reference to member charging_status
 * @return Reference to member charging_status
 */
bool& BatteryData::charging_status()
{
    return m_charging_status;
}




ADASData::ADASData()
{
}

ADASData::~ADASData()
{
}

ADASData::ADASData(
        const ADASData& x)
{
    m_timestamp = x.m_timestamp;
    m_forward_collision_distance = x.m_forward_collision_distance;
    m_lane_deviation = x.m_lane_deviation;
    m_lane_departure_warning = x.m_lane_departure_warning;
    m_forward_collision_warning = x.m_forward_collision_warning;
    m_blind_spot_warning_left = x.m_blind_spot_warning_left;
    m_blind_spot_warning_right = x.m_blind_spot_warning_right;
    m_obstacle_distances = x.m_obstacle_distances;
    m_adaptive_cruise_speed = x.m_adaptive_cruise_speed;
    m_time_to_collision = x.m_time_to_collision;
}

ADASData::ADASData(
        ADASData&& x) noexcept
{
    m_timestamp = x.m_timestamp;
    m_forward_collision_distance = x.m_forward_collision_distance;
    m_lane_deviation = x.m_lane_deviation;
    m_lane_departure_warning = x.m_lane_departure_warning;
    m_forward_collision_warning = x.m_forward_collision_warning;
    m_blind_spot_warning_left = x.m_blind_spot_warning_left;
    m_blind_spot_warning_right = x.m_blind_spot_warning_right;
    m_obstacle_distances = std::move(x.m_obstacle_distances);
    m_adaptive_cruise_speed = x.m_adaptive_cruise_speed;
    m_time_to_collision = x.m_time_to_collision;
}

ADASData& ADASData::operator =(
        const ADASData& x)
{

    m_timestamp = x.m_timestamp;
    m_forward_collision_distance = x.m_forward_collision_distance;
    m_lane_deviation = x.m_lane_deviation;
    m_lane_departure_warning = x.m_lane_departure_warning;
    m_forward_collision_warning = x.m_forward_collision_warning;
    m_blind_spot_warning_left = x.m_blind_spot_warning_left;
    m_blind_spot_warning_right = x.m_blind_spot_warning_right;
    m_obstacle_distances = x.m_obstacle_distances;
    m_adaptive_cruise_speed = x.m_adaptive_cruise_speed;
    m_time_to_collision = x.m_time_to_collision;
    return *this;
}

ADASData& ADASData::operator =(
        ADASData&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_forward_collision_distance = x.m_forward_collision_distance;
    m_lane_deviation = x.m_lane_deviation;
    m_lane_departure_warning = x.m_lane_departure_warning;
    m_forward_collision_warning = x.m_forward_collision_warning;
    m_blind_spot_warning_left = x.m_blind_spot_warning_left;
    m_blind_spot_warning_right = x.m_blind_spot_warning_right;
    m_obstacle_distances = std::move(x.m_obstacle_distances);
    m_adaptive_cruise_speed = x.m_adaptive_cruise_speed;
    m_time_to_collision = x.m_time_to_collision;
    return *this;
}

bool ADASData::operator ==(
        const ADASData& x) const
{
    return (m_timestamp == x.m_timestamp &&
           m_forward_collision_distance == x.m_forward_collision_distance &&
           m_lane_deviation == x.m_lane_deviation &&
           m_lane_departure_warning == x.m_lane_departure_warning &&
           m_forward_collision_warning == x.m_forward_collision_warning &&
           m_blind_spot_warning_left == x.m_blind_spot_warning_left &&
           m_blind_spot_warning_right == x.m_blind_spot_warning_right &&
           m_obstacle_distances == x.m_obstacle_distances &&
           m_adaptive_cruise_speed == x.m_adaptive_cruise_speed &&
           m_time_to_collision == x.m_time_to_collision);
}

bool ADASData::operator !=(
        const ADASData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ADASData::timestamp(
        uint64_t _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t ADASData::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& ADASData::timestamp()
{
    return m_timestamp;
}


/*!
 * @brief This function sets a value in member forward_collision_distance
 * @param _forward_collision_distance New value for member forward_collision_distance
 */
void ADASData::forward_collision_distance(
        float _forward_collision_distance)
{
    m_forward_collision_distance = _forward_collision_distance;
}

/*!
 * @brief This function returns the value of member forward_collision_distance
 * @return Value of member forward_collision_distance
 */
float ADASData::forward_collision_distance() const
{
    return m_forward_collision_distance;
}

/*!
 * @brief This function returns a reference to member forward_collision_distance
 * @return Reference to member forward_collision_distance
 */
float& ADASData::forward_collision_distance()
{
    return m_forward_collision_distance;
}


/*!
 * @brief This function sets a value in member lane_deviation
 * @param _lane_deviation New value for member lane_deviation
 */
void ADASData::lane_deviation(
        float _lane_deviation)
{
    m_lane_deviation = _lane_deviation;
}

/*!
 * @brief This function returns the value of member lane_deviation
 * @return Value of member lane_deviation
 */
float ADASData::lane_deviation() const
{
    return m_lane_deviation;
}

/*!
 * @brief This function returns a reference to member lane_deviation
 * @return Reference to member lane_deviation
 */
float& ADASData::lane_deviation()
{
    return m_lane_deviation;
}


/*!
 * @brief This function sets a value in member lane_departure_warning
 * @param _lane_departure_warning New value for member lane_departure_warning
 */
void ADASData::lane_departure_warning(
        bool _lane_departure_warning)
{
    m_lane_departure_warning = _lane_departure_warning;
}

/*!
 * @brief This function returns the value of member lane_departure_warning
 * @return Value of member lane_departure_warning
 */
bool ADASData::lane_departure_warning() const
{
    return m_lane_departure_warning;
}

/*!
 * @brief This function returns a reference to member lane_departure_warning
 * @return Reference to member lane_departure_warning
 */
bool& ADASData::lane_departure_warning()
{
    return m_lane_departure_warning;
}


/*!
 * @brief This function sets a value in member forward_collision_warning
 * @param _forward_collision_warning New value for member forward_collision_warning
 */
void ADASData::forward_collision_warning(
        bool _forward_collision_warning)
{
    m_forward_collision_warning = _forward_collision_warning;
}

/*!
 * @brief This function returns the value of member forward_collision_warning
 * @return Value of member forward_collision_warning
 */
bool ADASData::forward_collision_warning() const
{
    return m_forward_collision_warning;
}

/*!
 * @brief This function returns a reference to member forward_collision_warning
 * @return Reference to member forward_collision_warning
 */
bool& ADASData::forward_collision_warning()
{
    return m_forward_collision_warning;
}


/*!
 * @brief This function sets a value in member blind_spot_warning_left
 * @param _blind_spot_warning_left New value for member blind_spot_warning_left
 */
void ADASData::blind_spot_warning_left(
        bool _blind_spot_warning_left)
{
    m_blind_spot_warning_left = _blind_spot_warning_left;
}

/*!
 * @brief This function returns the value of member blind_spot_warning_left
 * @return Value of member blind_spot_warning_left
 */
bool ADASData::blind_spot_warning_left() const
{
    return m_blind_spot_warning_left;
}

/*!
 * @brief This function returns a reference to member blind_spot_warning_left
 * @return Reference to member blind_spot_warning_left
 */
bool& ADASData::blind_spot_warning_left()
{
    return m_blind_spot_warning_left;
}


/*!
 * @brief This function sets a value in member blind_spot_warning_right
 * @param _blind_spot_warning_right New value for member blind_spot_warning_right
 */
void ADASData::blind_spot_warning_right(
        bool _blind_spot_warning_right)
{
    m_blind_spot_warning_right = _blind_spot_warning_right;
}

/*!
 * @brief This function returns the value of member blind_spot_warning_right
 * @return Value of member blind_spot_warning_right
 */
bool ADASData::blind_spot_warning_right() const
{
    return m_blind_spot_warning_right;
}

/*!
 * @brief This function returns a reference to member blind_spot_warning_right
 * @return Reference to member blind_spot_warning_right
 */
bool& ADASData::blind_spot_warning_right()
{
    return m_blind_spot_warning_right;
}


/*!
 * @brief This function copies the value in member obstacle_distances
 * @param _obstacle_distances New value to be copied in member obstacle_distances
 */
void ADASData::obstacle_distances(
        const std::vector<float>& _obstacle_distances)
{
    m_obstacle_distances = _obstacle_distances;
}

/*!
 * @brief This function moves the value in member obstacle_distances
 * @param _obstacle_distances New value to be moved in member obstacle_distances
 */
void ADASData::obstacle_distances(
        std::vector<float>&& _obstacle_distances)
{
    m_obstacle_distances = std::move(_obstacle_distances);
}

/*!
 * @brief This function returns a constant reference to member obstacle_distances
 * @return Constant reference to member obstacle_distances
 */
const std::vector<float>& ADASData::obstacle_distances() const
{
    return m_obstacle_distances;
}

/*!
 * @brief This function returns a reference to member obstacle_distances
 * @return Reference to member obstacle_distances
 */
std::vector<float>& ADASData::obstacle_distances()
{
    return m_obstacle_distances;
}


/*!
 * @brief This function sets a value in member adaptive_cruise_speed
 * @param _adaptive_cruise_speed New value for member adaptive_cruise_speed
 */
void ADASData::adaptive_cruise_speed(
        float _adaptive_cruise_speed)
{
    m_adaptive_cruise_speed = _adaptive_cruise_speed;
}

/*!
 * @brief This function returns the value of member adaptive_cruise_speed
 * @return Value of member adaptive_cruise_speed
 */
float ADASData::adaptive_cruise_speed() const
{
    return m_adaptive_cruise_speed;
}

/*!
 * @brief This function returns a reference to member adaptive_cruise_speed
 * @return Reference to member adaptive_cruise_speed
 */
float& ADASData::adaptive_cruise_speed()
{
    return m_adaptive_cruise_speed;
}


/*!
 * @brief This function sets a value in member time_to_collision
 * @param _time_to_collision New value for member time_to_collision
 */
void ADASData::time_to_collision(
        float _time_to_collision)
{
    m_time_to_collision = _time_to_collision;
}

/*!
 * @brief This function returns the value of member time_to_collision
 * @return Value of member time_to_collision
 */
float ADASData::time_to_collision() const
{
    return m_time_to_collision;
}

/*!
 * @brief This function returns a reference to member time_to_collision
 * @return Reference to member time_to_collision
 */
float& ADASData::time_to_collision()
{
    return m_time_to_collision;
}


// Include auxiliary functions like for serializing/deserializing.
#include "VehicleSystemsCdrAux.ipp"

