// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleSystems.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_VEHICLESYSTEMS_H_
#define _FAST_DDS_GENERATED_VEHICLESYSTEMS_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VEHICLESYSTEMS_SOURCE)
#define VEHICLESYSTEMS_DllAPI __declspec( dllexport )
#else
#define VEHICLESYSTEMS_DllAPI __declspec( dllimport )
#endif // VEHICLESYSTEMS_SOURCE
#else
#define VEHICLESYSTEMS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define VEHICLESYSTEMS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima







/*!
 * @brief This class represents the structure PowertrainData defined by the user in the IDL file.
 * @ingroup VehicleSystems
 */
class PowertrainData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport PowertrainData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~PowertrainData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object PowertrainData that will be copied.
     */
    eProsima_user_DllExport PowertrainData(
            const PowertrainData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object PowertrainData that will be copied.
     */
    eProsima_user_DllExport PowertrainData(
            PowertrainData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object PowertrainData that will be copied.
     */
    eProsima_user_DllExport PowertrainData& operator =(
            const PowertrainData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object PowertrainData that will be copied.
     */
    eProsima_user_DllExport PowertrainData& operator =(
            PowertrainData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x PowertrainData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const PowertrainData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x PowertrainData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const PowertrainData& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function sets a value in member engine_rpm
     * @param _engine_rpm New value for member engine_rpm
     */
    eProsima_user_DllExport void engine_rpm(
            float _engine_rpm);

    /*!
     * @brief This function returns the value of member engine_rpm
     * @return Value of member engine_rpm
     */
    eProsima_user_DllExport float engine_rpm() const;

    /*!
     * @brief This function returns a reference to member engine_rpm
     * @return Reference to member engine_rpm
     */
    eProsima_user_DllExport float& engine_rpm();


    /*!
     * @brief This function sets a value in member engine_temperature
     * @param _engine_temperature New value for member engine_temperature
     */
    eProsima_user_DllExport void engine_temperature(
            float _engine_temperature);

    /*!
     * @brief This function returns the value of member engine_temperature
     * @return Value of member engine_temperature
     */
    eProsima_user_DllExport float engine_temperature() const;

    /*!
     * @brief This function returns a reference to member engine_temperature
     * @return Reference to member engine_temperature
     */
    eProsima_user_DllExport float& engine_temperature();


    /*!
     * @brief This function sets a value in member engine_load
     * @param _engine_load New value for member engine_load
     */
    eProsima_user_DllExport void engine_load(
            float _engine_load);

    /*!
     * @brief This function returns the value of member engine_load
     * @return Value of member engine_load
     */
    eProsima_user_DllExport float engine_load() const;

    /*!
     * @brief This function returns a reference to member engine_load
     * @return Reference to member engine_load
     */
    eProsima_user_DllExport float& engine_load();


    /*!
     * @brief This function sets a value in member transmission_temp
     * @param _transmission_temp New value for member transmission_temp
     */
    eProsima_user_DllExport void transmission_temp(
            float _transmission_temp);

    /*!
     * @brief This function returns the value of member transmission_temp
     * @return Value of member transmission_temp
     */
    eProsima_user_DllExport float transmission_temp() const;

    /*!
     * @brief This function returns a reference to member transmission_temp
     * @return Reference to member transmission_temp
     */
    eProsima_user_DllExport float& transmission_temp();


    /*!
     * @brief This function sets a value in member current_gear
     * @param _current_gear New value for member current_gear
     */
    eProsima_user_DllExport void current_gear(
            int32_t _current_gear);

    /*!
     * @brief This function returns the value of member current_gear
     * @return Value of member current_gear
     */
    eProsima_user_DllExport int32_t current_gear() const;

    /*!
     * @brief This function returns a reference to member current_gear
     * @return Reference to member current_gear
     */
    eProsima_user_DllExport int32_t& current_gear();


    /*!
     * @brief This function sets a value in member throttle_position
     * @param _throttle_position New value for member throttle_position
     */
    eProsima_user_DllExport void throttle_position(
            float _throttle_position);

    /*!
     * @brief This function returns the value of member throttle_position
     * @return Value of member throttle_position
     */
    eProsima_user_DllExport float throttle_position() const;

    /*!
     * @brief This function returns a reference to member throttle_position
     * @return Reference to member throttle_position
     */
    eProsima_user_DllExport float& throttle_position();


    /*!
     * @brief This function copies the value in member dtc_codes
     * @param _dtc_codes New value to be copied in member dtc_codes
     */
    eProsima_user_DllExport void dtc_codes(
            const std::vector<std::string>& _dtc_codes);

    /*!
     * @brief This function moves the value in member dtc_codes
     * @param _dtc_codes New value to be moved in member dtc_codes
     */
    eProsima_user_DllExport void dtc_codes(
            std::vector<std::string>&& _dtc_codes);

    /*!
     * @brief This function returns a constant reference to member dtc_codes
     * @return Constant reference to member dtc_codes
     */
    eProsima_user_DllExport const std::vector<std::string>& dtc_codes() const;

    /*!
     * @brief This function returns a reference to member dtc_codes
     * @return Reference to member dtc_codes
     */
    eProsima_user_DllExport std::vector<std::string>& dtc_codes();

private:

    uint64_t m_timestamp{0};
    float m_engine_rpm{0.0};
    float m_engine_temperature{0.0};
    float m_engine_load{0.0};
    float m_transmission_temp{0.0};
    int32_t m_current_gear{0};
    float m_throttle_position{0.0};
    std::vector<std::string> m_dtc_codes;

};


/*!
 * @brief This class represents the structure ChassisData defined by the user in the IDL file.
 * @ingroup VehicleSystems
 */
class ChassisData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ChassisData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ChassisData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ChassisData that will be copied.
     */
    eProsima_user_DllExport ChassisData(
            const ChassisData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ChassisData that will be copied.
     */
    eProsima_user_DllExport ChassisData(
            ChassisData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ChassisData that will be copied.
     */
    eProsima_user_DllExport ChassisData& operator =(
            const ChassisData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ChassisData that will be copied.
     */
    eProsima_user_DllExport ChassisData& operator =(
            ChassisData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ChassisData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ChassisData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ChassisData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ChassisData& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function sets a value in member brake_pressure
     * @param _brake_pressure New value for member brake_pressure
     */
    eProsima_user_DllExport void brake_pressure(
            float _brake_pressure);

    /*!
     * @brief This function returns the value of member brake_pressure
     * @return Value of member brake_pressure
     */
    eProsima_user_DllExport float brake_pressure() const;

    /*!
     * @brief This function returns a reference to member brake_pressure
     * @return Reference to member brake_pressure
     */
    eProsima_user_DllExport float& brake_pressure();


    /*!
     * @brief This function sets a value in member steering_angle
     * @param _steering_angle New value for member steering_angle
     */
    eProsima_user_DllExport void steering_angle(
            float _steering_angle);

    /*!
     * @brief This function returns the value of member steering_angle
     * @return Value of member steering_angle
     */
    eProsima_user_DllExport float steering_angle() const;

    /*!
     * @brief This function returns a reference to member steering_angle
     * @return Reference to member steering_angle
     */
    eProsima_user_DllExport float& steering_angle();


    /*!
     * @brief This function copies the value in member suspension_height
     * @param _suspension_height New value to be copied in member suspension_height
     */
    eProsima_user_DllExport void suspension_height(
            const std::array<float, 4>& _suspension_height);

    /*!
     * @brief This function moves the value in member suspension_height
     * @param _suspension_height New value to be moved in member suspension_height
     */
    eProsima_user_DllExport void suspension_height(
            std::array<float, 4>&& _suspension_height);

    /*!
     * @brief This function returns a constant reference to member suspension_height
     * @return Constant reference to member suspension_height
     */
    eProsima_user_DllExport const std::array<float, 4>& suspension_height() const;

    /*!
     * @brief This function returns a reference to member suspension_height
     * @return Reference to member suspension_height
     */
    eProsima_user_DllExport std::array<float, 4>& suspension_height();


    /*!
     * @brief This function copies the value in member wheel_speed
     * @param _wheel_speed New value to be copied in member wheel_speed
     */
    eProsima_user_DllExport void wheel_speed(
            const std::array<float, 4>& _wheel_speed);

    /*!
     * @brief This function moves the value in member wheel_speed
     * @param _wheel_speed New value to be moved in member wheel_speed
     */
    eProsima_user_DllExport void wheel_speed(
            std::array<float, 4>&& _wheel_speed);

    /*!
     * @brief This function returns a constant reference to member wheel_speed
     * @return Constant reference to member wheel_speed
     */
    eProsima_user_DllExport const std::array<float, 4>& wheel_speed() const;

    /*!
     * @brief This function returns a reference to member wheel_speed
     * @return Reference to member wheel_speed
     */
    eProsima_user_DllExport std::array<float, 4>& wheel_speed();


    /*!
     * @brief This function copies the value in member brake_pad_wear
     * @param _brake_pad_wear New value to be copied in member brake_pad_wear
     */
    eProsima_user_DllExport void brake_pad_wear(
            const std::array<float, 4>& _brake_pad_wear);

    /*!
     * @brief This function moves the value in member brake_pad_wear
     * @param _brake_pad_wear New value to be moved in member brake_pad_wear
     */
    eProsima_user_DllExport void brake_pad_wear(
            std::array<float, 4>&& _brake_pad_wear);

    /*!
     * @brief This function returns a constant reference to member brake_pad_wear
     * @return Constant reference to member brake_pad_wear
     */
    eProsima_user_DllExport const std::array<float, 4>& brake_pad_wear() const;

    /*!
     * @brief This function returns a reference to member brake_pad_wear
     * @return Reference to member brake_pad_wear
     */
    eProsima_user_DllExport std::array<float, 4>& brake_pad_wear();


    /*!
     * @brief This function sets a value in member abs_active
     * @param _abs_active New value for member abs_active
     */
    eProsima_user_DllExport void abs_active(
            bool _abs_active);

    /*!
     * @brief This function returns the value of member abs_active
     * @return Value of member abs_active
     */
    eProsima_user_DllExport bool abs_active() const;

    /*!
     * @brief This function returns a reference to member abs_active
     * @return Reference to member abs_active
     */
    eProsima_user_DllExport bool& abs_active();


    /*!
     * @brief This function sets a value in member traction_control_active
     * @param _traction_control_active New value for member traction_control_active
     */
    eProsima_user_DllExport void traction_control_active(
            bool _traction_control_active);

    /*!
     * @brief This function returns the value of member traction_control_active
     * @return Value of member traction_control_active
     */
    eProsima_user_DllExport bool traction_control_active() const;

    /*!
     * @brief This function returns a reference to member traction_control_active
     * @return Reference to member traction_control_active
     */
    eProsima_user_DllExport bool& traction_control_active();

private:

    uint64_t m_timestamp{0};
    float m_brake_pressure{0.0};
    float m_steering_angle{0.0};
    std::array<float, 4> m_suspension_height{0.0};
    std::array<float, 4> m_wheel_speed{0.0};
    std::array<float, 4> m_brake_pad_wear{0.0};
    bool m_abs_active{false};
    bool m_traction_control_active{false};

};


/*!
 * @brief This class represents the structure BatteryData defined by the user in the IDL file.
 * @ingroup VehicleSystems
 */
class BatteryData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BatteryData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BatteryData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BatteryData that will be copied.
     */
    eProsima_user_DllExport BatteryData(
            const BatteryData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BatteryData that will be copied.
     */
    eProsima_user_DllExport BatteryData(
            BatteryData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BatteryData that will be copied.
     */
    eProsima_user_DllExport BatteryData& operator =(
            const BatteryData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BatteryData that will be copied.
     */
    eProsima_user_DllExport BatteryData& operator =(
            BatteryData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BatteryData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BatteryData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BatteryData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BatteryData& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function sets a value in member voltage
     * @param _voltage New value for member voltage
     */
    eProsima_user_DllExport void voltage(
            float _voltage);

    /*!
     * @brief This function returns the value of member voltage
     * @return Value of member voltage
     */
    eProsima_user_DllExport float voltage() const;

    /*!
     * @brief This function returns a reference to member voltage
     * @return Reference to member voltage
     */
    eProsima_user_DllExport float& voltage();


    /*!
     * @brief This function sets a value in member current
     * @param _current New value for member current
     */
    eProsima_user_DllExport void current(
            float _current);

    /*!
     * @brief This function returns the value of member current
     * @return Value of member current
     */
    eProsima_user_DllExport float current() const;

    /*!
     * @brief This function returns a reference to member current
     * @return Reference to member current
     */
    eProsima_user_DllExport float& current();


    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            float _temperature);

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport float temperature() const;

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport float& temperature();


    /*!
     * @brief This function sets a value in member state_of_charge
     * @param _state_of_charge New value for member state_of_charge
     */
    eProsima_user_DllExport void state_of_charge(
            float _state_of_charge);

    /*!
     * @brief This function returns the value of member state_of_charge
     * @return Value of member state_of_charge
     */
    eProsima_user_DllExport float state_of_charge() const;

    /*!
     * @brief This function returns a reference to member state_of_charge
     * @return Reference to member state_of_charge
     */
    eProsima_user_DllExport float& state_of_charge();


    /*!
     * @brief This function sets a value in member power_consumption
     * @param _power_consumption New value for member power_consumption
     */
    eProsima_user_DllExport void power_consumption(
            float _power_consumption);

    /*!
     * @brief This function returns the value of member power_consumption
     * @return Value of member power_consumption
     */
    eProsima_user_DllExport float power_consumption() const;

    /*!
     * @brief This function returns a reference to member power_consumption
     * @return Reference to member power_consumption
     */
    eProsima_user_DllExport float& power_consumption();


    /*!
     * @brief This function sets a value in member charging_cycles
     * @param _charging_cycles New value for member charging_cycles
     */
    eProsima_user_DllExport void charging_cycles(
            int32_t _charging_cycles);

    /*!
     * @brief This function returns the value of member charging_cycles
     * @return Value of member charging_cycles
     */
    eProsima_user_DllExport int32_t charging_cycles() const;

    /*!
     * @brief This function returns a reference to member charging_cycles
     * @return Reference to member charging_cycles
     */
    eProsima_user_DllExport int32_t& charging_cycles();


    /*!
     * @brief This function sets a value in member charging_status
     * @param _charging_status New value for member charging_status
     */
    eProsima_user_DllExport void charging_status(
            bool _charging_status);

    /*!
     * @brief This function returns the value of member charging_status
     * @return Value of member charging_status
     */
    eProsima_user_DllExport bool charging_status() const;

    /*!
     * @brief This function returns a reference to member charging_status
     * @return Reference to member charging_status
     */
    eProsima_user_DllExport bool& charging_status();

private:

    uint64_t m_timestamp{0};
    float m_voltage{0.0};
    float m_current{0.0};
    float m_temperature{0.0};
    float m_state_of_charge{0.0};
    float m_power_consumption{0.0};
    int32_t m_charging_cycles{0};
    bool m_charging_status{false};

};


/*!
 * @brief This class represents the structure ADASData defined by the user in the IDL file.
 * @ingroup VehicleSystems
 */
class ADASData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ADASData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ADASData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ADASData that will be copied.
     */
    eProsima_user_DllExport ADASData(
            const ADASData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ADASData that will be copied.
     */
    eProsima_user_DllExport ADASData(
            ADASData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ADASData that will be copied.
     */
    eProsima_user_DllExport ADASData& operator =(
            const ADASData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ADASData that will be copied.
     */
    eProsima_user_DllExport ADASData& operator =(
            ADASData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ADASData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ADASData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ADASData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ADASData& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function sets a value in member forward_collision_distance
     * @param _forward_collision_distance New value for member forward_collision_distance
     */
    eProsima_user_DllExport void forward_collision_distance(
            float _forward_collision_distance);

    /*!
     * @brief This function returns the value of member forward_collision_distance
     * @return Value of member forward_collision_distance
     */
    eProsima_user_DllExport float forward_collision_distance() const;

    /*!
     * @brief This function returns a reference to member forward_collision_distance
     * @return Reference to member forward_collision_distance
     */
    eProsima_user_DllExport float& forward_collision_distance();


    /*!
     * @brief This function sets a value in member lane_deviation
     * @param _lane_deviation New value for member lane_deviation
     */
    eProsima_user_DllExport void lane_deviation(
            float _lane_deviation);

    /*!
     * @brief This function returns the value of member lane_deviation
     * @return Value of member lane_deviation
     */
    eProsima_user_DllExport float lane_deviation() const;

    /*!
     * @brief This function returns a reference to member lane_deviation
     * @return Reference to member lane_deviation
     */
    eProsima_user_DllExport float& lane_deviation();


    /*!
     * @brief This function sets a value in member lane_departure_warning
     * @param _lane_departure_warning New value for member lane_departure_warning
     */
    eProsima_user_DllExport void lane_departure_warning(
            bool _lane_departure_warning);

    /*!
     * @brief This function returns the value of member lane_departure_warning
     * @return Value of member lane_departure_warning
     */
    eProsima_user_DllExport bool lane_departure_warning() const;

    /*!
     * @brief This function returns a reference to member lane_departure_warning
     * @return Reference to member lane_departure_warning
     */
    eProsima_user_DllExport bool& lane_departure_warning();


    /*!
     * @brief This function sets a value in member forward_collision_warning
     * @param _forward_collision_warning New value for member forward_collision_warning
     */
    eProsima_user_DllExport void forward_collision_warning(
            bool _forward_collision_warning);

    /*!
     * @brief This function returns the value of member forward_collision_warning
     * @return Value of member forward_collision_warning
     */
    eProsima_user_DllExport bool forward_collision_warning() const;

    /*!
     * @brief This function returns a reference to member forward_collision_warning
     * @return Reference to member forward_collision_warning
     */
    eProsima_user_DllExport bool& forward_collision_warning();


    /*!
     * @brief This function sets a value in member blind_spot_warning_left
     * @param _blind_spot_warning_left New value for member blind_spot_warning_left
     */
    eProsima_user_DllExport void blind_spot_warning_left(
            bool _blind_spot_warning_left);

    /*!
     * @brief This function returns the value of member blind_spot_warning_left
     * @return Value of member blind_spot_warning_left
     */
    eProsima_user_DllExport bool blind_spot_warning_left() const;

    /*!
     * @brief This function returns a reference to member blind_spot_warning_left
     * @return Reference to member blind_spot_warning_left
     */
    eProsima_user_DllExport bool& blind_spot_warning_left();


    /*!
     * @brief This function sets a value in member blind_spot_warning_right
     * @param _blind_spot_warning_right New value for member blind_spot_warning_right
     */
    eProsima_user_DllExport void blind_spot_warning_right(
            bool _blind_spot_warning_right);

    /*!
     * @brief This function returns the value of member blind_spot_warning_right
     * @return Value of member blind_spot_warning_right
     */
    eProsima_user_DllExport bool blind_spot_warning_right() const;

    /*!
     * @brief This function returns a reference to member blind_spot_warning_right
     * @return Reference to member blind_spot_warning_right
     */
    eProsima_user_DllExport bool& blind_spot_warning_right();


    /*!
     * @brief This function copies the value in member obstacle_distances
     * @param _obstacle_distances New value to be copied in member obstacle_distances
     */
    eProsima_user_DllExport void obstacle_distances(
            const std::vector<float>& _obstacle_distances);

    /*!
     * @brief This function moves the value in member obstacle_distances
     * @param _obstacle_distances New value to be moved in member obstacle_distances
     */
    eProsima_user_DllExport void obstacle_distances(
            std::vector<float>&& _obstacle_distances);

    /*!
     * @brief This function returns a constant reference to member obstacle_distances
     * @return Constant reference to member obstacle_distances
     */
    eProsima_user_DllExport const std::vector<float>& obstacle_distances() const;

    /*!
     * @brief This function returns a reference to member obstacle_distances
     * @return Reference to member obstacle_distances
     */
    eProsima_user_DllExport std::vector<float>& obstacle_distances();


    /*!
     * @brief This function sets a value in member adaptive_cruise_speed
     * @param _adaptive_cruise_speed New value for member adaptive_cruise_speed
     */
    eProsima_user_DllExport void adaptive_cruise_speed(
            float _adaptive_cruise_speed);

    /*!
     * @brief This function returns the value of member adaptive_cruise_speed
     * @return Value of member adaptive_cruise_speed
     */
    eProsima_user_DllExport float adaptive_cruise_speed() const;

    /*!
     * @brief This function returns a reference to member adaptive_cruise_speed
     * @return Reference to member adaptive_cruise_speed
     */
    eProsima_user_DllExport float& adaptive_cruise_speed();


    /*!
     * @brief This function sets a value in member time_to_collision
     * @param _time_to_collision New value for member time_to_collision
     */
    eProsima_user_DllExport void time_to_collision(
            float _time_to_collision);

    /*!
     * @brief This function returns the value of member time_to_collision
     * @return Value of member time_to_collision
     */
    eProsima_user_DllExport float time_to_collision() const;

    /*!
     * @brief This function returns a reference to member time_to_collision
     * @return Reference to member time_to_collision
     */
    eProsima_user_DllExport float& time_to_collision();

private:

    uint64_t m_timestamp{0};
    float m_forward_collision_distance{0.0};
    float m_lane_deviation{0.0};
    bool m_lane_departure_warning{false};
    bool m_forward_collision_warning{false};
    bool m_blind_spot_warning_left{false};
    bool m_blind_spot_warning_right{false};
    std::vector<float> m_obstacle_distances;
    float m_adaptive_cruise_speed{0.0};
    float m_time_to_collision{0.0};

};

#endif // _FAST_DDS_GENERATED_VEHICLESYSTEMS_H_



