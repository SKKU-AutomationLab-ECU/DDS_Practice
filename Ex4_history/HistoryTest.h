// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HistoryTest.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_HISTORYTEST_H_
#define _FAST_DDS_GENERATED_HISTORYTEST_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(HISTORYTEST_SOURCE)
#define HISTORYTEST_DllAPI __declspec( dllexport )
#else
#define HISTORYTEST_DllAPI __declspec( dllimport )
#endif // HISTORYTEST_SOURCE
#else
#define HISTORYTEST_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define HISTORYTEST_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure SensorData defined by the user in the IDL file.
 * @ingroup HistoryTest
 */
class SensorData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SensorData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SensorData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SensorData that will be copied.
     */
    eProsima_user_DllExport SensorData(
            const SensorData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SensorData that will be copied.
     */
    eProsima_user_DllExport SensorData(
            SensorData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SensorData that will be copied.
     */
    eProsima_user_DllExport SensorData& operator =(
            const SensorData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SensorData that will be copied.
     */
    eProsima_user_DllExport SensorData& operator =(
            SensorData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SensorData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SensorData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SensorData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SensorData& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            uint64_t _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport uint64_t timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport uint64_t& timestamp();


    /*!
     * @brief This function sets a value in member sequence_number
     * @param _sequence_number New value for member sequence_number
     */
    eProsima_user_DllExport void sequence_number(
            uint32_t _sequence_number);

    /*!
     * @brief This function returns the value of member sequence_number
     * @return Value of member sequence_number
     */
    eProsima_user_DllExport uint32_t sequence_number() const;

    /*!
     * @brief This function returns a reference to member sequence_number
     * @return Reference to member sequence_number
     */
    eProsima_user_DllExport uint32_t& sequence_number();


    /*!
     * @brief This function sets a value in member temperature
     * @param _temperature New value for member temperature
     */
    eProsima_user_DllExport void temperature(
            float _temperature);

    /*!
     * @brief This function returns the value of member temperature
     * @return Value of member temperature
     */
    eProsima_user_DllExport float temperature() const;

    /*!
     * @brief This function returns a reference to member temperature
     * @return Reference to member temperature
     */
    eProsima_user_DllExport float& temperature();


    /*!
     * @brief This function sets a value in member humidity
     * @param _humidity New value for member humidity
     */
    eProsima_user_DllExport void humidity(
            float _humidity);

    /*!
     * @brief This function returns the value of member humidity
     * @return Value of member humidity
     */
    eProsima_user_DllExport float humidity() const;

    /*!
     * @brief This function returns a reference to member humidity
     * @return Reference to member humidity
     */
    eProsima_user_DllExport float& humidity();


    /*!
     * @brief This function sets a value in member pressure
     * @param _pressure New value for member pressure
     */
    eProsima_user_DllExport void pressure(
            float _pressure);

    /*!
     * @brief This function returns the value of member pressure
     * @return Value of member pressure
     */
    eProsima_user_DllExport float pressure() const;

    /*!
     * @brief This function returns a reference to member pressure
     * @return Reference to member pressure
     */
    eProsima_user_DllExport float& pressure();


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();

private:

    uint64_t m_timestamp{0};
    uint32_t m_sequence_number{0};
    float m_temperature{0.0};
    float m_humidity{0.0};
    float m_pressure{0.0};
    std::string m_message;

};

#endif // _FAST_DDS_GENERATED_HISTORYTEST_H_



